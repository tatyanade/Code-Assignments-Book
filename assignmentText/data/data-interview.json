[
    {
        "titles": "Advice for New Educators",
        "question": "What’s your advice for educators teaching arts-programming for the first time?",
        "answer": "*Whether you’ve just landed your first teaching gig, or you’re a seasoned educator scheduled to teach programming for the first time, the prospect of designing your first creative coding class can be daunting. Will your foundational course be a hack-it-together heart-and-soul enthusiasm raiser, or a formal introduction to programming with visually-oriented exercises? Can it be both? And how do you deal with the apparent contradictions of blending engineering and poetry in the same syllabus? These challenges  faced by the computational arts teacher been captured surpassingly well in the unofficial mission statement of the Processing project:\n\n“Processing seeks to ruin the careers of talented designers by tempting them away from their usual tools and into the world of programming and computation. Similarly, the project is designed to turn engineers and computer scientists to less gainful employment as artists and designers.” (Ben Fry at Eyeo Festival, June 2011)\n\nThe following conversations navigate this terrain, outlining a range of tactics, tips and lessons learnt the hard way. As a collection, they describe a multiplicity of approaches honed through iteration and emphasize the importance of conveying culture and creating community.*\n\n@Jer Thorp@\nGet students making things as soon as you can. For me that has to be like ten minutes into the class. We write a really simple four-line Processing sketch that does something really easy and gets them there right away. Don't stop to talk about what the IDE is and what syntax looks like, or what a semicolon means. That stuff sucks. You need it but it sucks. Do the making first, then use that to go back and talk about it after.\n\nIf you are teaching programming to non-programmers, and specifically to designers and artists, I think it’s really important to say in the beginning \"my intent here is not to make you into a programmer. I think you should continue being a printmaker, or a typographer or whatever you are. My intent is to give you some computational tools that will help you.\" Especially in design school, students will often come in and say \"I don't want to be a computer designer. I don't want to be a software guy.\" And so I say, “that’s fine. I don't want you to either. I want you to continue being a watercolor painter or a sculptor but I want to give you some provocations that might help the way you think.”\n\n@Zach Lieberman@\nEvery time I give out a homework, I always say that every homework assignment is an opportunity for genius. The most important advice is to have that sort of optimism, having that sort of energy for your students with every prompt and every time you ask them to do something or engage in something. Learning code can be frustrating and it requires a lot of time and a lot of failure. Time and failure and misunderstanding. To imbue a sense of optimism here is so important. To celebrate this as a new mode of working and to help students to realize that there's all these untapped ideas out there.\n\nAlso, anything that can turn the classroom into a mini film festival is really great. I think it's important as a teacher to show what you're curious about, to show what inspires you and to be able to talk elegantly or passionately about what moves you as that helps students articulate what moves them. By showing these references and using them as a context to talk about code, it can help students translate and articulate what they care about.\n\n@Taeyoon Choi@\nTeaching a very small group of students can be really instructive, like maybe less than five people. This is actually a really prestigious opportunity because it’s rare. It’s great to do, as you get a much higher resolution on how the material is being received.\n\nI also think drawing is really helpful. I draw a lot before the class and during the class and I sometimes draw the same thing over and over again. The idea is that I'm performing a drawing and it gives the students the time to think with me about how knowledge is processed. I encourage them to make drawings in their sketchbook as well and then they end up with their own textbook in a way. An explanatory text that they processed themselves.\n\nIt’s also really helpful to understand that not all students are going to appreciate what you teach. If I get like twenty percent of the students really excited about what I do, I call it a good day. Teaching is a really difficult thing to do.\n\n@Phoenix Perry@\nMy advice would be to discourage students from collaborating with peers they know. Try and get people to work in groups of people where they might have to be exposed to new ideas or new kinds of things. \n\nThe other piece of advice I would give is to be really careful when you start seeing ‘bro’ culture emerge. When you start seeing the classroom segregate and the women start fetching coffee and the guys are doing the code, or where the women are doing all the ‘art’. Be really careful of that and remain very cognizant that it can happen.\n\nFor me the biggest problem I have is not the part involving students; that's really easily done once you learn to balance the energy in the classroom. The real challenge is realizing that there is a level outside the classroom which is how you deal with the fellow staff, how you deal with the college administration, and how you get to keep teaching. You have to work out what an academic career actually looks like outside of the classroom because that is how you get to keep your job. \n\nFor example, if you check in and check out and just teach your class and get good reviews, that's not enough to ensure you get to keep your job in academia. You need to be very visible, you need to be integrating into the community, you need to be participating in publishing papers, you need to be making allies and friends in your department, and you also need to be building relationships with the administrators so when a class opens up they know who you are. That is really important, particularly as the adjunct model becomes more and more widespread. As full-time jobs become less and less sure, understanding how a professional career or research career can connect through to a teaching practice is really important as well as how to communicate that outward. I'm a good teacher and I get good reviews because my students like me but for any permanent roles, that’s not enough. Keeping your job can be really difficult particularly in places like NYU where there’s so much more going on besides teaching. It's like Game of Thrones. Everybody's a rockstar and so what makes you stand out from all the other rockstars is your attitude with the administration and how you help the department meet whatever objectives they have on the bigger scale.\n\n@Lauren McCarthy@\nSomething that I read that really stuck with me is that the brain is setup so that as soon as you figure out something that was confusing you, your brain immediately forgets what it feels like to be confused. Your synapses will fire in a way so that you’re not confused anymore. So you learn to code and it clicks. You ride a bike, and then you can't remember how to not ride a bike and for that reason, it's sometimes really hard to remember how confusing that feeling of confusion is. So my advice is something I always try to do before office hours, and that is I to try to think about something that's really confusing, or I try to like imagine myself back in the lab as a student, when I used to just sit there hoping someone would do my homework for me. I really try to tap into that feeling of frustration, that confusion when things don't just click. And not just like “the answer = 7, ta dah!” but that feeling when each step needs to be a moment of understanding. By trying to take yourself back there as a teacher, particularly if there's a lot of students you need to help, it helps you connect with them more.\n\n*That’s great. There have been times when teaching a class for the first time, especially if it’s something slightly outside my skill set, that I’ve received some unexpectedly good results and reviews. Then once I’ve taught it a few more times and I know the material really well, it's harder to empathize. After those first couple of times I often feel like I'm actually getting worse at teaching it which is really not intuitive at all. So as first-time educators your inexperience can actually be a positive thing, because you are more likely to relate to students and understand what they are going through.*\n \nTotally. I think the other thing is just modeling belief as this can change student’s world. I think probably everyone who has ever done something or been successful has had someone who believed in them and made that clear, and helped the student understand how to believe for themselves. I think about that a lot.\n\n@Daniel Shiffman@\nWell I continually make the same mistakes over and over again and one piece of advice I have is to do a lot less than you think you can do. As a long-time neurotic, I am a way over-preparer. For example, I was teaching a new class this semester and I ended up making 30 examples when there was only time to look at like two or three in class. One thing I’ve often done is to assume that because I made all this stuff, I have to get to it all. Then when there's only 10 minutes left of class, I would try rush through the rest of it. In my opinion, it’s definitely much better to not do this. Instead, slow down and leave stuff out. You can always get to it later, or you can send out an email, or not do it at all. I think doing less each class and allowing yourself a slowness is really important.\n\nObviously I've been doing all the stuff with videos and that’s part of an attempt to create an environment where there is some quality of self-paced learning. If you can do this or foster some collaborative learning where the students are working in smaller groups or individually in a kind of workshop setting, it’s a really good thing. Much better than rushing through a lecture and showing like 500 examples in 15 minutes.\n\nAlso, don’t overlook teaching students how to ask for help. That's a huge part of the learning process. You can't just teach the programming; you’ve also got to teach how to get help, like; “How do you ask? What's the right question to ask? When do you write, how do you debug?” All of that type of stuff, which can easily be lost in the, “here's the lesson” type approach.\n\n@DeAngela Duff@\nI would recommend that first-time educators check out Daniel Shiffman’s videos. I love these videos. Some of my students don’t like them because they don’t think they’re serious enough. They think somehow that they shouldn’t be having fun learning, which sort of blows my mind. But I think it’s seriously important for first-time teachers to witness the enthusiasm that Dan Shiffman has about teaching programming. \n\nI would also recommend doing something similar to what I tell my students to do, which is to look at multiple books to see which book they prefer. Look at as many syllabi as you can find. There’s a lot on Github. I don't recommend following what someone has done before because I think that teaching should be a creative process, crafting your syllabus should also be a creative process, and you shouldn’t just be following someone else’s syllabus. However, it’s a good way to get assignment ideas and to get to know how certain assignments are just sort of classics. \n\nOne thing I do with my students is called ‘ticket to leave’. Towards the end of class, I give out sticky notes or literally pieces of paper (but it could be done on Slack whatever). And I tell students to write down three questions that they might have about any of the material that was covered today and also to list three key points that they got from what we did in class that day. That way I can find out what stuck and what the problems were. I think that's a really awesome tool because then at the beginning of the next class I answer the questions and maybe see something that didn't stick overall. Then I’ll go over it again.\n\n@Heather Dewey-Hagborg@\nI would tell first-time educators to try to teach to what they are enthusiastic about, to what they actually care about. If the technical aspects matter less than their enthusiasm for the subject, then they shouldn't feel like they have to get up there and lecture about code. It’s possible to engage students in lots of different ways. The most important thing is to share what is exciting to you about the practice of programming.\n\nWhen I started out as a freshman, I really didn't have any kind of interaction with technology whatsoever, in fact I was probably pretty anti-technology. Then in my freshman year I took a conceptual art class that included a lot of references to media art, the beginnings of Dada and Fluxus and installation art, and that got me excited about learning some of the tools of new media which led me into doing some work with sound and video. Then as I started working more with sound in particular, I felt very distant from the medium. Having come from a more materially engaged practice like sculpture and installation, I felt like when I was working with sound I was removed from the material. I was using a software interface but I felt distant from it, so I signed up for an introductory programming class, a Python class. In part, I signed up for it because of the title which was *Thinking with Objects*, and I liked that because I thought it sounded very physical and visual. Of course I didn't know it just meant object-oriented code but luckily the professor was really fascinating. A brilliant brilliant man who even in that intro class, starting tying the code into ideas about neural networking and genetic algorithms.\n\nEven though we were total beginners and we couldn't quite understand what he was saying, he provided these very visual explanations of neural networks and of organisms and I found that really exciting. Again, I probably would have never continued with it except that he specifically came to me and said \"you should consider taking the Artificial Intelligence class\".  If he hadn't gone out of his way to invite me to take this class, I would have thought I wasn't good enough to do it, but because he did I became curious about it, and then took it and really loved it. This kind of faith in students can make a huge difference. It’s what launched me into this whole algorithmic direction.\n\n@Luke DuBois@\nIn our creative-coding curriculum we have four sections that are all different. I teach one that focuses on music. Allison Parrish teaches one that focuses on text, Kevin Siwoff focuses on graphics and 3D, and Katherine Bennett on physical computing. You choose one which is your home section, but you can float between the others as the classes don’t happen simultaneously. By doing this you can get reinforcement by going to the other sections. You could go to eight or sixteen of these classes a week if you wanted.\n\nYou complete assignments for your home class but you can be exposed to all the others. In an ideal world, we would figure out a way to teach all four of those things in each section, and the instructors would rotate but there's not enough time. My advice is don't just make it a graphics class. Like really, not even half graphics. Teach that first to get it the fuck out of the way and then talk about text, sound and hardware. Or the web. Talk about Rest APIs or about all those pet peeves you have about the dot com fetish of the day whatever it is. Try to interrogate these larger technological narratives a little bit, whether it’s Internet of Things or Quantified Self or whatever. Last year, I had this kid who was really into IoT stuff and he had hacked his entire home in LA so his mom could hit the snooze button and it would turn on the coffee maker and then when she picked up the coffee machine, the shower would turn on. Really great stuff! He’d really drunk the Kool Aid on this stuff. Around that time we’d got a beta release of those stupid Nest things and I told him to hack it and figure out how to get it to do something useful. Originally, he was like “I'm going to make a robotic arm for the equipment room” but by the end of it he had made this weird garden of little automatic bleepy bloopy things that look like bombs. He made this great little art installation out of hacking this stupid piece of horrible commerce tech made so you can voice-activate your dishwasher or whatever it is. That was cool.\n\n@Allison Parrish@\nI had the pleasure of taking several classes from Marina Zurkow at ITP and she was really mean on the first day of class. She was like really strict and she just projected this persona of like being very exacting. I found that super refreshing in the context of the rest of ITP where teachers tend to be a tiny bit lackadaisical. I’ve tried to adopt Marina’s approach at least for that first day: be strict up front and don’t give any ground when it comes to the idea that you’re the one teaching, and that the class that you’ve designed or the class that you’re teaching is a serious thing that deserves the students’ attention. Otherwise they might not apply themselves to the same degree. It’s important they know that you really care and that you’re not going to accept work or behavior that doesn’t live up to a particular standard, even if you become like a super softie as the class evolves. I found that to be successful. \n\nMaking sure that I take the ideas in my own classes seriously can be difficult. Something I’ve had to learn is that even if I’m not so sure that the thing that I’m teaching is all that interesting or important, it’s really important to project confidence. This is important because it’s not only going to help the students do good work, but it’s also going to help you put everything you can into the teaching process. \n\n@John Maeda@\nLeave academia as soon as you’ve learned all that you had hoped to learn. \n",
        "fullpageimage": "defaults/default_fullpage_666x522.jpg"
    },
    {
        "titles": "Favorite Assignment",
        "question": "What’s your favorite assignment for computational arts students?",
        "answer": "*Like the riddles of the Sphinx, or the labours of Hercules, good assignments have folkloric qualities. As in any oral tradition, the most memorable assignments are passed from teacher to student, often with small changes, and yet in ways that are surprisingly resilient to personalization. We asked our respondents to describe the assignments which are closest to their hearts, or which yield especially good learning in their classrooms.*\n\n@Daniel Shiffman@\nLet me preface this by saying that sometimes I feel like assignments are my weakness. The tricky things is to balance a feeling of open-endedness with constraints, so that students can feel creative and make their own thing, but the assignment is not impossible.\n\nI have two assignments to share. One is from the *Nature of Code* course materials and it’s for more of an advanced classroom, for people who’ve already taken a full semester of programming and who are now launching into learning about motion, simulation, nature and physics. The assignment is to build your own ecosystem. It's really not a single assignment but a thing that you might do over a long period of time. It starts by learning to make this one little thing move around the screen, and then later figuring out how to make 10 of those move around the screen and then how to make those 10 things see an obstacle in the environment, see each other and bounce and interact with each other. So the idea is to build a whole ecosystem out of little miniature parts. I really enjoy seeing what kind of strange world people will create, that either mirror things in our real world or are fantastical inventions.\n\nThe other thing I really love doing in an intro class is anything that fosters collaboration. It's a really hard to do and is a much easier thing to pull off in a physical computing class, although I don’t actually teach that. But what I’ve observed is that when you're building something physical, seeing where the collaboration comes in is more obvious. When learning programming, students tend to think they have to work solo on code projects, when actually, large pieces of software are built by teams of people. One of the assignments I really like is to randomly partner students and have them exchange bits of code and you get these kind of Frankenstein monsters, like, “I made the sun rise,” and “I made a fish swimming, and now I have a fish swimming through a sunrise.” That kind of thing.\n\n*That reminds me of an assignment that John Maeda gave a long time ago, which was to take someone else's assignment from last week and “improve” it or modify it.*\n\nRight. And where this can also work well with is when teaching object-oriented programming. I really like to say, “make your class and then give it to somebody else to make objects from inside of their world.” What I love about that is not just the collaboration and having to talk to somebody, but that it also teaches about open source development and library making. Students can’t just give somebody else their code, but they also have to explain what all the functions do and invent their own documentation, whether that's just explaining it in an email or with good code comments.\n\nObviously if you were teaching a more advanced class, you might have the class use GitHub or whatever, and create a documentation page. I like trying to keep that spirit of collaboration, learning how to exchange code and also learning about object-oriented programming. All of that works well together. I think I like that assignment better than the first one.\n\n@Jer Thorp@\nHmm, I wish I had a really clever answer for this. One that works the best for me is the “drawing tool” assignment and I often give it on the first day. There’s something really rewarding about making a drawing tool because you can quickly get at what makes computational assistance powerful, and students also get something that they can share very quickly. One of my big strategies for teaching designers and artists how to code is to get them making as soon as possible, and associated with that is sharing as soon as possible. I want them to have something that they can post on their Facebook or Twitter feed at the end of 3 hours and because they are proud of it, they get that little buzz. They get to say \"Check out what I’m making\" and their friends are like \"This is great!  How did you do it?\" I think that this is where teaching programming goes wrong and it often goes wrong! It means that in week 5 if you have students who’ve survived 3 or 4 weeks of not making things, you’ve already self-selected a group of people that maybe we don’t need to be selecting for.\n\nSo for me, the goal it that within an hour of the first class we have a really simple drawing tool going. Like the one where it draws a line from the middle of the screen to the mouse position and they can draw little spirals with that. Then I do another one right after that where your program draws grass at the mouse position and from there, they create own drawing tool. One of the other reasons I think that it works so well at the beginning is that it gets people into this idea of the modularity of programming. I say to them \"let’s look at the command to draw a line and the command to draw a rectangle.\" Even though one command draws a line and the other draws a rectangle, they both take four numbers and so they're actually interchangeable. I can just drop the arguments for one into the other. In the beginning of my first 2-3 classes, the big focus is to get people to repeatedly ask, “every time you see a number, what would happen if I put another number in there? And every time you see a method to think \"What would happen if I put another method in there?\" Because that’s where this stuff becomes exciting. Through the grass drawing program we learn a little bit about random(), and then we can go back to the old example and put in random() for the line width or they put random() in for the other positions. I want to get them into that Lego method of programming as soon as possible, and to see programs not as things that are crazy glued together but as things that can be taken apart and reassembled.\n\n*Let me tweak the question. What are some of your favorite prompts, specifically in the field of information visualization, and maybe prompts that are not necessarily for beginners, but that can be approached by anyone at different levels, including advanced or intermediate students?*\n\nIn an information visualization context, the one that works the best is to take location-based data and ask students to do something with it that is not allowed to be on a map. I could build a whole course around this assignment. In my data class students take a big data set of something that is primarily latitude and longitude but as they can’t plot it on a map, they have to plot them in some other way. It’s really nice because it kind of frees you from constraint. It’s a different take on the exact same thing that we were talking about before: I want people to understand that there’s no rule that says that you have to plot longitude as a line along a horizontal axis. It could be anything. It can be color, it can be the size of a sphere, it can be anything. In binding my student’s arms a little and saying \"You are not allowed to put this on a map\", it forces them to see it in a different way and that’s by far the most successful assignment. If I don't give them that constraint, everyone gives me dots on a map and dots on a map are actually rarely interesting. I have this city bike map from New York City, I have a data set of every hotel in the world. I have a couple other big datasets, and I'm like \"Don't do a map with this\". Just that prompt alone forces them to do really interesting things. People will do sonifications or they will do really really big extractions. More than any other assignment, it gets them thinking about our mental constructs that seem to force us towards making one type of thing with certain types of data. This exercise helps you realise you can do something else and by doing something else you can expose something in the data that you wouldn't have otherwise seen.\n\n@Lauren McCarthy@\nIn my introductory classes one of my favorite assignments is for when we introduce parameters and variables. The assignment is to create a sketch where there's a change of perspective as you move your mouse across the screen. I explain that it should change visually, but it should also provide a change of perspective. The question is, how can you subvert the viewer’s expectations when they move the mouse? I often show some examples of this from other areas of art, such a video-performance work by Anya Liftig and Caitlin Berrigan called *Adoring Appetite*. In this piece, the two artists pushed strollers around NYC, snuggling and kissing their babies. At some point, the kissing turns to biting and eating, and they chew through the babies heads which turn out to be made of sugar and filled with red jelly. I ask my students, “what would it look like to create an experience this affecting with code?”\n\nI also like the assignments for my more advanced *Social Hacking* course that I teach with Kyle McDonald. My favorite one is where you have to create an API for an aspect of yourself or your life. Students have to pick something and make it controllable somehow by someone else. This is done either using a data feed or they open up a question to the public; usually it's the second thing. Another one that can go anywhere is I instruct them to create an X, so whatever we’re making, browser extensions, or apps or whatever, they have to make it for someone else, and not just anyone else, but for one specific person. Students then must start with the person rather than the idea and I think this helps because it's a different design process. When you are just making something for yourself, it's easy to not be thinking really clearly about why you're making decisions, but if you are thinking about someone else, then you're forced to imagine the user experience a little more, and imagine their goals.\n\nThe last exercise I like to do is have to write down what they are going to do that week, usually the steps they’ll take when working towards a final project. I ask them to write down exactly what tasks they are going to accomplish, and a time estimate for each one. Then through the week they are asked to time each task very specifically. We then have a debrief afterwards and usually I say: “Ok what were you going to do?” And they’re like: “well I thought I was just going to make a simple data viz connecting only one stream of information.” And we find these buzzwords: so if you use the word “just” multiply your estimate by two, or if you say “simple”, multiply by four. It’s really common that people do not easily anticipate how long things take.\n\n@Taeyoon Choi@\nI ask my students to design a walk. We take a city block, assume it to be a grid, and then we program each other's walks. So you can go right across the block for 8 times, go left and if you meet another student, turn the other way, or exchange directions and that gets them thinking about enacting. What does it mean to enact code or to execute a piece of software that's really simple, but through it you actually experience the city in a whole different way?\n\n*Is the program like, “turn left at the fire hydrant” kinda thing? Or if you see a yellow car, turn right?*\n\nIt starts out like that but we introduce the idea of variables or conditions where they meet a vendor, and it turns the whole algorithm the other way around, or where they keep counting something, like how many yellow cabs they see, that at some point triggers a change.\n\n*Like, take as many steps as you see yellow cabs or something?*\n\nYeah exactly, but they design the walk. So we use a pac-man like grid, and then I have a very simple algorithm that keeps them looping around the one city block, but if they get out of the loop it gets quite nutty quite quickly.\n\n@Phoenix Perry@\nI like to get people to think about the kinds of things they can do with gaming and not just video games, but gaming more broadly. For example, maybe you want to use a sensor and you want to track someone's position. I'll show them the games I've made, like for example where you can knock things with your head, or when you scream and something happens and so on. I try to expand the possibilities and get them to just blue-sky dream up crazy games. If the sky's the limit, what are some things that you would like to try and do? Around the same time, I introduce the idea of pervasive gaming and you can get them thinking about play outside of the computer. That really works well if you have a mix of artists and game designers because they can synthesize their interests in a really fascinating way and make games that have nothing to do with the computer and that have very simple rules. I think that that's a really empowering experience and something I've done before outside of skillset.\n\n@John Maeda@\nI never had one. I do know that I was at my best in the beginning, and gradually got less good as I started to know what I was doing.\n\n@Heather Dewey-Hagborg@\nIn my bioart class, the first assignment that we do starts by looking at the future of synthetic biology, genetic engineering and design futuring. So I use a speculative design approach, and the assignment is to design a product or service that anticipates where they imagine either genetic engineering or synthetic biology going in say the next 100 years. The students then come up with both a sketch of the product or service and also write a page of written discussion on what that future they have envisioned is and how that product has an impact on society.\n\n*So it is a critical project which they don’t actually have to build in a working form? It can remain entirely speculative so long as it has a criticality to it?*\n\nExactly. In that module we also perform genetic engineering experiments so that the students have some hands-on engagement with these processes and so they understand some of the limits of what’s possible. But this assignment encourages them to think beyond what they are capable of actually doing. The frame of an actual semester is not enough time for them to really do anything significant with something like genetic engineering, unless they took a whole semester off for a special project. This way, they get some hands-on experience in a lab where they learn what the processes look like, and then I'm asking them to think about where this work is going and what future we are building.\n\n@Zach Lieberman@\nThe best assignment that I have, is to study and recreate work from an artist from the past. \nWhen I’m teaching algorithmic animation or audiovisual expression or just in general, a common example is where I ask students to take the work of James and John Whitney as a starting point and then I give this in two ways. First is to make something inspired by their work, so to really try to come up with an original copy. To take a look at their body of work and to add a comment to it. The other way, is to focus on replication and to come up with a faithful copy. The *ReCode Project* by Matthew Epler does a great job at presenting both of these approaches side by side, where there are attempts to really copy alongside examples that have taken inspiration from particular artists. This assignment can then also be used as a method to talk about how people were working in the ‘50s, ‘60s, ‘70s and to talk about different computational approaches. I like that it allows you to talk about the past and history and not just the technology and code.\n\nRather than giving an open-ended prompt, for example to create natural phenomena using sine and cosine, this pushes students as what they are doing becomes framed with the context of artmaking. By taking an in-depth look at the work of another artist, it pushes people for sure to produce better results and to take the work they are doing more seriously. It becomes not just a technical exploration but rather an exploration of someone who has used these things in a really poetic way.\n\n@Luke DuBois@\nIf I'm teaching an audio class with Max/MSP, I'll have everybody build a flanger. A flanger plays two copies of the same sound simultaneously, but slightly offset in time.\n\nEvery audio effect on the planet can be demonstrated using the guitar solo from Jimi Hendrix's version of Bob Dylan's *All Along the Watchtower*. You can teach everything you need to know about audio processing with this 32-bar guitar solo because Hendrix does every type of effect in there. Hendrix's secret weapon was this guy Roger Mayer, who built guitar pedals for him. Guitar pedals that nobody else had. He had the first wah-wah and the first pedal flanger. The flanger originally was a studio technique because the flange refers to manipulating the inner reel of the tape and so you had to do it in the studio. In the song *Badge* by Cream, that's actually a guy at Abbey road putting his finger on the flange for Eric Clapton's solo. But Mayer figured out how to do it with a capacitor in his delays. The guitar solo for *All Along the Watchtower* has Hendrix switching pickups on his guitar, going from picks to fingering to slide plus a distortion pedal, an echo pedal, a core, and a flanger and a wah-wah. In that moment in between the second and third verse, you can learn pretty much everything you need to know about audio signal processing, minus maybe convolution, but you can get pretty much all the time-domain techniques. This means you can also talk about the electronics of the guitar, which is a big part of it because he switches from his bridge to his neck pickup and back a couple of times on his strap.\n\nI usually start by playing that and then I show them how to make a delay line and add feedback. I give them the assignment of figuring out how to tweak all the values to make a flanger, and then they have to bring in a record that uses a flanger and a recording of them copying it. Like bring in a Siouxsie and the Banshees tune, or Kanye West. Kanye uses flangers all over the place. DJ Shadow, any of those U.N.C.L.E. tracks, the Bristol Beat sound, any Tricky record or early Björk record, these all use a flanger in them somewhere. I have my students do this because it's a really simple Max patch to build.\n\n@DeAngela Duff@\nAn assignment I usually do is I have them draw something either by hand, or in Adobe Illustrator, using only basic shapes: the triangle, square, circle and lines. Then I ask them to recreate that drawing using code. It's really important that it's something that they draw themselves, instead of recreating a painting for example, because there are a lot of examples of that online, that they could just copy and paste the code. \n\n*I’ve always wanted to try to start term with a figure drawing class, but using Processing. Where I’d ask a nude model to sit for my first programming class and have students represent him or her in code.*\n\nRight! I think drawing is useful because some people aren't practiced in it, they think they can't draw and just to have them engaged with that creative exercise is really important, even if they are just drawing stick figures.\n\n@Allison Parrish@\nMy favorite assignment is called the *Digital Cutup*. I give this assignment right after I give a lecture about data structures like lists, dictionaries and maps, basically all the stuff you need inside of a computer program to read something from a text file and then put it into a data structure to save for later. What you need for building for a basic model of the text. And leading up to that lecture the readings are all about writing strategies like cut ups, so taking a newspaper and cutting it up or reading just the first line of a different page of a novel or putting them together, methods like that. But in my class the task is to do that digitally. Like “I have this text; now that I know how to make data structures, I can pick out units from that text, I can think about what things things from this text that are necessary: like individual characters, or the entire file, or am I going to parse this text up into units and then think about putting it back together? I have this list of parts of the text, do I put them back randomly? do I like setup light intricate set of rules to put it back together? and so forth.” This is the fundamental assignment of the classes that I teach, because I think it’s the point where it brings together that this is a coding class but it's also poetry class and that we're doing both of these together at the same time. These programming concepts are directly applicable to these more conceptual activities in literary history. \n",
        "fullpageimage": "defaults/default_fullpage_666x522.jpg"
    },
    {
        "titles": "Teaching Programming to Artists",
        "question": "What’s different about teaching artists and designers to code, in contrast with teaching programming in a computer science context?",
        "answer": "*Educator Leah Buechley has observed that artists and designers are accustomed to (1) learning by making concrete examples, rather than by studying abstract principles; (2) working in ways which are improvisational, rather than planned; and (3) creating things which are expressive, rather than utilitarian. Taken together, Buechley’s observations delineate some of the key ways in which the assumptions, cultures, and presumed objectives of traditional computer science education often fail for artists and designers. In this section, educators elaborate on the special conditions and considerations for teaching a “studio art course in computer science”.*\n\n@Heather Dewey-Hagborg@\nI think it’s important to teach everyone to code. I think it’s a fundamental literacy that we need to be advocating for across the board. But for artists in particular, it has to be *project-based*. I think that the only way you really get artists motivated is by having them work on their own thing, something that they are actually excited about doing. In my experience, giving a bunch of assignments that they don't care about is kind of useless. Instead, if they are trying to synthesize things that they have maybe read about, or maybe seen a video about, but then they are actually forced to synthesize it into something that they actually want to make, then they will learn it. I think that’s maybe more important than what the project looks like, or what language it is written in, or whether they make something visual with it or not.\n\nAt the end of the day, people will want to work on all different kinds of things and I really do think that once they learn one language well, they can just pick up any other one. So really, the aim is to make programming a tool for them to use of their own volition and with their own agency, to make what they really want to make.\n\n@Daniel Shiffman@\nUltimately people are people, so you can teach classes any number of ways to different groups. However, I think that the idea of *sketching with code* is really important as it implies a lightness in trying things out.\n\nI’ve had this discussion with Lauren McCarthy, who has a really formal computer science background. She was telling me about how hard it was for her to get used to teaching in a creative context like NYU ITP because in computer science, there is this feeling of having to know everything, how everything works and of being able to reproduce everything from scratch in a memorized and almost like blue-book test kind of way. In contrast, teaching in a creative environment or in an arts environment is about being able to embrace uncertainty. Where students don't necessarily know everything but they should try it anyway, where mistakes might actually lead to exciting ideas and where there doesn’t have to have to be a thing that is solved with an exact answer. In a way, it’s almost like stream of consciousness coding. I don’t want to portray the computer science class in a negative way, but it’s based by contrast on learning something exactly and precisely.\n\nTo be honest, it's hard for the students. Every semester I have a student say, “Okay, I really feel like I'm not getting this because the thing you showed in class, I can't sit down by myself from a blank sketch and like, write it again.” But nobody can do that, really! Everybody who's programming something is programming it because they did something similar before. Or it's built on top of a library and they started with the example and that's a totally valid way to learn.\n\n@Lauren McCarthy@\nAmongst CS people, I think there is this feeling that the code itself is the art, and that there's all of these ideas and techniques you have to understand first, like managing complexity and modularity, before you can get to really make things. That was really hard for me when I started teaching, I’d think, “Oh we're just showing the students how to make shapes on the screen, they don't understand what programming is about.” But actually that is totally wrong because programming can be about a lot of different things. Usually when teaching artists, some of them will immediately fall in love with the logic of it but for a lot of them, that's not why they’re excited, typically they have other goals. If they progress far enough into it, some might start to feel curious about kind of the higher-order stuff of programming, or they may not. As for me, I wasn't interested at all until I realized I could make art with it, so I think teaching programming to artists is a lot about expanding purist ideas of what programming might be, or letting go of your snobby attitude. It’s important to realize that it's not like you’re dumbing it down or simplifying it; rather you're actually just approaching it from a different angle. And doing this will likely make you understand programming in a different way.\n\n@John Maeda@\nArtists tend to look down upon math as something that gave them prior difficulty or hurt them in the past. But there are a few artists, I have seen over the last few decades, that overcome this stigma to create software as fluidly as a computer scientist. Also, it’s important to remember that some artists come from a purely mathematical/coding background. It’s incorrect to assume that all artists don’t start with the ability to code, especially now.\n\n@Phoenix Perry@\nI think you need to assume no skill. I think it is really important to go slow from the basics and make sure that students have the basics right. I think that you also need to review fundamental mathematics in a way that is connected to a visual output. A lot of my students were taught math without it having any meaning, they get taught sine and cosine but they never learned these ideas in terms of animation and oscillation.\n\n*I can relate. Sometimes have Art sophomores who don't know the Pythagorean theorem. And I’m like “Here's a right triangle; let's talk about it.” And when they struggle with it I have to chide them and say “Folks, c’mon. This is ancient Greek technology. It’s 2016; you should know this stuff.”*\n\nBut it's mathematics, and it’s been strangely segmented from the arts. If you identify as a creative person, it's often really hard to see yourself as a mathematician or as a scientist, or that you would even have a confidence to be good at those things, right? So I think you have to really reintroduce subjects in a language the artists understand, which is visual and auditory. And if you can do that, they’ll often get it all of a sudden.\n\n@Zach Lieberman@\nI think one of the biggest challenges to respect when teaching artists to code is that this mode of working tends to be pretty solitary. You're in front of a computer screen. It tends to be a time-consuming and solitary experience and that can be frustrating especially if you're used to practices that are more physical, or group based or based on discussion. Instead of talking to people you are talking with a compiler. You’re in a conversation mediated through a computer screen and I notice students who get frustrated with that. I think that these things make this mode of learning hard.\n\n@DeAngela Duff@\nI've actually taught both computer science and art students, because in our digital media department we have both. Computer science students have a totally different mentality than the art/design mindset and and one of the reasons why they take our class is because they do want to be \"creative\". Of course you can't just typecast them as being like one type, there are multiplicities of types but with the ones who might be perceived as more traditional computer science students, they don't consider themselves as being creative or having visual art skills. When I ask them to come up with a drawing to work with, for example, it's really tough, it’s actually pretty excruciating for them. \n\nI have the class post their projects to OpenProcessing.org, so everybody can see everybody else's work and a lot of times those students would sort of be amazed at what other students came up with, and they would realize that their drawings weren't as ambitious. It's really important that they can expand upon it and remix it or whatever you want to call it, as we work with this drawing for a long time. So I give them one week to revise. One of my former co-workers used to say that students rise to the water level that you give them and usually that water level is set by somebody in the class. If one of the students does this amazing thing, then the students look at what they've done and they think \"I can put a little bit more time or effort into this\". I hear a lot, “I can't draw” and it's not about that, it's about creative expression and using these basic building blocks like the circle, square, triangle, lines and points. Yet this actually is sometimes one of the hardest assignments for a lot of the students.\n\n@Allison Parrish@\nWhat’s great about teaching art students or teaching creative writing students is it’s rarely vocationally regulated. Nobody is trying to take my class to see if they can get a better job, or very few students are, and I don’t hold that against the students that are doing that. But it’s kind of a relief and a blessing as an instructor to have students where they are very eager to learn what I have to say so that they can apply it in their own arts practice. Whenever I say something or whenever I teach them something you can just see like a light go on in their head and they’re like, “this is going to let me do this other thing that’s a part of my own practice.” It never feels like I have to make the class goal-oriented, it never feels like I have to make the class about working towards something other than our interests as artists. \nFor me is the main difference is that there’s a little bit of wiggle room. I can say, let’s appreciate this process for its aesthetic effect on us instead of having to think about, does this meet these particular criteria in the curriculum or is this going to prepare students to succeed in the in the tech industry.\n",
        "fullpageimage": "defaults/default_fullpage_666x522.jpg"
    },
    {
        "titles": "The Bimodal Classroom",
        "question": "How do you manage novice and experienced students simultaneously?",
        "answer": "*As programming skills gain wider public adoption, it has become increasingly common to have classes in which experienced and inexperienced programmers are mixed together. This can be particularly vexing in technically oriented contexts, in which the absolute beginners feel lost, while students who are already familiar with the material are bored.* \n\n@Taeyoon Choi@\nI don't have a good solution to this, but for me, the best practice is to give two different versions of the same assignment, especially for my electronics classes, where there's often different ways of doing the same thing. I like to give challenges to the experienced people who have done it once, and for the beginners, give them enough time to learn. I want to avoid having one person done like in ten minutes when there is another person taking one hour to do it. A more hands-on approach at SFPC [the School for Poetic Computation] has been encouraging the advanced students to mentor the beginner students, not in a hierarchical way but to have them solve the problem together. That has some mixed success; it works for some assignments and not for others. \n\nSomething that I learned from other teachers at SFPC is also to encourage the more advanced students to build teaching materials. They may be able to solve a problem quickly, but for them to come up with new assignments from that code or new assignments for another toolset is a more conceptual challenge. It’s also important to understand that even the most advanced technical students are probably not experienced teachers or artists, and are probably not confident explaining or helping other people, so there's a lot for them to learn from that practice. \n\n@Dan Shiffman@\nI get asked this all the time and I don't know if I do this successfully or not, but I'll tell you what I think works. I try to have an approach of looking at a particular example in incredible detail for a beginner. So, line by line, making sure every little piece is sort of talked about and understood, and building up this example. In theory I might do that for half the time and then the other half of the time I look at an example from a higher level, talking about the concepts and demoing it in a way that we can have a more free-form conversation, where it's okay if the students don't suddenly know every part of how the code is working.\n\nIn some ways I oscillate between shooting for the low end and shooting for the high end, as for me, the place in the middle is sometimes problematic. Like, “I'm kind of showing you the code, but not really” or “I'm just giving some things but not all of them”. This can get confusing. I feel like it's helpful to either go through the process step by step or to just run an example and talk about what it is and why it's meaningful and important. Then students can then look at the code later.\n\nIn some ways a lot of what I do is creating a feeling of ease in the classroom. I often joke that I don't know if I'm teaching anybody or if I'm just giving people the feeling that they're learning. Ultimately students have to learn it on their own when they go and try the stuff and so it's important to have people feel empowered and feel that they can do it.\n\n@Phoenix Perry@\nUsually what I do is I pull the experienced people aside after class and be like “whoa dude, you're awesome, why don't you go and check out this book. You can ignore me when I talk, if you show me what you can do with this.” I give them stuff that's outside their skillset, that's actually really hard material, and it's like a puzzle and then they sort of ignore you in class, and at the end they come back with something. The other thing you can do is turn them into TAs, but the danger with those students is that their knowledge is usually patchy in that they think they know more than they actually know. I've seen those students become the worst in the class because they get lapped by the others who are paying attention and are systematic in a pedagogical way.\n\n@John Maeda@ \nIf you’re referring to folks who are more adept at coding versus more adept at traditional art, I would say that you deal with it by assuring that the population of your class cohort is distributed 50/50. \n\n@Jer Thorp@\nThe way that I've learned to deal with that is to not be very rigid in the way that I define projects, and to allow people to operate within those projects at a comfort level that works for them. The first time I taught my class, I defined the projects so rigidly that the difference between the good coders and the bad coders would really stand out, but by defining the projects less rigidly, it allows people to play to their strengths more and that's something that took me a long time to really embrace. My projects are now about a theme and not about how I insist that you work on that theme.\n\n@Lauren McCarthy@\nI really try to push that it's not just about wanting to program. A lot of times if you're a very good programmer, that probably means that you haven't spent a lot of time thinking about art or design or user interaction or any of these things. So I just try to emphasize that, but also when we are giving feedback, I try to call on people who have these other skills to make everyone realize, that these are just as important and relevant. \n\nSometimes it's hard, but setting expectations in the beginning is helpful. Letting the advanced students know that technically it might feel a little bit slow, but that gives them time to explore some of their other ideas and that they should work on that and not sit there being bored by the review material but to really engage with what you can do with it. And also vice versa, I try to help the students who are beginners understand that some people have done it before but that doesn't mean that they are bad at it because they haven't done it before. These are different things. I encourage them to not feel intimidated, to survey their skills to see what they are missing and to ask themselves, how they might work on those skills. \n\n@Zach Lieberman@\nI deal with this a lot as most the classes I teach tend to be mixed, unless it’s a workshop that’s specifically for advanced students or for beginners which I actually think is a kind of a disservice to everyone. I think having classrooms where there are people with different skillsets is really valuable, specifically in terms of the community. What you want to do is create conversation, create modes where beginners are asking questions of experts and to create a chain of learning. When everyone is in the same place it's much harder to do. What I try to do for the experts is give them prompts where they feel like their input and time in the classroom is both useful and valuable. I often ask them “can you take the things that we’re talking about and create teaching tools, and techniques to teach this better?” I try to turn them into teachers in some way and I try to give them prompts that push them to have that sort of mindset. \n\nThere are also ways of making everybody a beginner because everybody is a beginner in something. So coming to classroom where there are both beginners and experts, can you figure out ways to push the people who think they know the material and flip what they are doing so that they realize that there is a lot that they don’t know. I like to show them the problem set in a different way, like in a different language or with different constraints.\n\nAt some point in a bimodal classroom, I also think there is value in pulling out the beginners or the people who feel like they are lost, and creating a safe place where this small subgroup can meet. So in a classroom of 15 you might have 4-5 students who meet privately and you try to raise their comfort level and confidence. They often need a safer space to ask questions they might not ask in class because they are shy about asking. Creating smaller groups can be helpful.\n\n@Luke Dubois@\nI have to do the “one room schoolhouse” thing a lot. Sixty percent of my students are also products of the New York City Public School Systems because we're NYU's last commuter school and unfortunately, most of my students didn't have the chance to go to Bronx Science or Brooklyn Tech. They went to places where their computing class was maybe how to use Dreamweaver. Some have done CS and they have some math, but nobody ever thought to take them to MoMA or the Guggenheim. So everybody has got this gap. One of the things that's really nice about my little proxy for an art program inside an engineering school, is that in an engineering school you're encouraged to assign lots of group design work. And so I can figure out these orthogonalities between the students pretty quickly and pair them in ways so that they match each other and so that they have to teach each other stuff. I try to do that as much as possible. It's hard; like this year it's gotten really hard because we started admitting new graduate students coming from other parts of NYU that cover recorded music and undergrad photo. And those kids have a very high cultural fluency but they don't have any of the computer chops. Or if they do it's like they know how to use a crack of Ableton really well but they don't know how to code. And so it was really challenging this year. In response, I made every assignment on how to use photography in some way but everybody had to have a soundtrack. I “de-oculocentrized” the curriculum and everybody, everything had to have music, no matter what.\n\n@DeAngela Duff@\nI'm a huge believer in pair-programming, or peer programming. I usually pair a more seasoned programmer with a less-seasoned or novice, and have the novice do the programming and have the more experienced person be the observer. I also encourage the students to form external study groups, as sometimes I find that the students who already have experience programming actually really want to help the other students, and that one of the ways they can do this is by spearheading the study group outside of class. I might also have a student explain a programming concept in a different way, using a different language than I'm using. \n\nI always tell students to use multiple resources when they learn how to program. I always assign two different textbooks and then tell them to try to get a third resource if they can. They all have different examples and explain certain concepts differently, and I think the more the merrier when they're trying to understand something for the first time.\n\n*You mentioned that you sometimes teach multiple languages in parallel.*\n\nI always do. I don't want students thinking “I can only program in X” because I teach programming as a tool and I want my students to be able to program in any programming environment. If they know what a loop is, or what an array is or what an object is as a concept, then they just need to figure out the syntax. I usually teach three programming languages at the same time only because they usually drop one. I don't tell them two is fine but they usually gravitate towards two out of three. If I just teach two they'll dismiss one of them and just focus on one, so I usually structure the class so that we're learning the basic concepts two-thirds of the way in all three languages, and in the last third of the semester they select their own project. For the week-by-week deliverables they have to write them in all the different languages and in the final third of the semester they can select one of those languages for the final project. I give them extra credit if they build it in two languages. Mostly they don't like it at first, and to start out they hate me as I ask a lot of them, but like I said, I do find that students rise to the water level that you expect of them. Hopefully it helps them learn new languages when they need to, without being afraid.\n\n@Allison Parrish@\nTeaching technology with the arts in mind kind of gives you a leg up on that problem automatically. If you consider my class as primarily a programming class, which it isn’t but like if you look at it from that point of view, it’s the conceptual part that sort of levels the students to some extent because there’s some students who, despite being beginning programmers, have amazingly strong artistic points of view and are aware of the history of procedural writing or are into conceptual writing in general. Even with just like the very rudimentary tools that I’m teaching at the beginning, they’re able to make something that aesthetically stands up to whatever the advanced programmers are making off the bat. I often teach in Python, and Python used to be a language that not a lot of people knew, and so that was another equalizer for the class. That’s been less true more recently in the last couple of years as I get more programmers coming into my class who have a deeper understanding of Python. But then the subject area [of creative writing and computational poetry] helps with that problem. Not a lot of computer programmers know how to do that so there’s going to be a little bit of every tutorial that’s going be new to everyone regardless of what their pre-existing programming skill is.\n",
        "fullpageimage": "defaults/default_fullpage_666x522.jpg"
    },
    {
        "titles": "The First Day",
        "question": "What do you do on the first day of class?",
        "answer": "*It’s midnight on the day before the semester starts and you can’t sleep for worrying about tomorrow’s class. The first day is often nerve-racking: it’s a critical moment to set the tone for the semester and shape student expectations. In this section, our respondents discuss their different approaches for what they do on that first day of the term.*\n\n@Zach Lieberman@\nOn the first day of SFPC we start with questions, and it is really fascinating. We come in and explain a little bit about what we do and I ask students to take 20-30 minutes by themselves and write down every single question that they have. And this creates a really interesting and really strange moment. I want to know whatever has brought them into the classroom and what questions they had in mind. They sit write, meditate and then we collate them. These questions become signposts or markers for what we talk about. So someone will say “I want to learn about X, Y, Z.”  And someone else will put up a response saying “come talk to me.” Some questions are unanswerable, like really deep and profound questions and I love some that some students will try and cross questions off the list as the class progresses. I think it's important grounding. A lot of times you come into the classroom and the professor gives you a syllabus and it’s like: here's where you're going to go, here's the journey we are going to take, we're going to cover these things to get to that point. So it's nice to start on the first day and say: “what we are going to do here is really *driven by questions*, driven by a collective exploration of questioning.” I think this is really helpful to get students in the right mindset. As a teacher, I want to have students that ask a million questions and so you want to create an environment built on more questions than fewer.\n\n@Daniel Shiffman@\nOn the first day, I always feel very anxious all morning before class. That's what I do on the first day! I always wonder, “what am I going do for two and a half hours? I mean that's so much time!” And then I over-prepare and inevitably only get to only get to like a tenth of what I meant to.\n\nIt's different in different contexts, but one of the things that I do if possible, is to not look at any code until the last five minutes of class, if at all. In the past I’ve done a conditional drawing exercise, where the students pair up and one writes instructions that the other has to draw.\n\nAnother thing that I also do is try to have a discussion about historical context, programming languages and what it means to program. Like why should you program? If I'm in a class of true beginners, I like to talk about what programming languages the students have heard of and what they think people do with them. I ground everybody in a larger landscape, which is a nice thing to do.\n\nWhat I also find is useful is to show work people have made in previous years and to really focus on projects that do some social good, or projects that just have this totally nonsensical, playful quality with no practical value whatsoever. It's easy to imagine certain kinds of interactive exhibits or certain kinds of games, so I try to showcase projects that are a bit different.\n\nOne thing that I have become much more conscious about recently is making sure that when I'm showing the projects, that I have a diverse set of people who've made them as well: from different communities, different genders and that type of thing.\n\n@Lauren McCarthy@\nI like tell a lot of jokes that nobody gets, and if I keep it up, by Week 7 I might at least get a pity laugh. In the introductory class we do a lot of borrowed things, like “Conditional Design” drawing exercises, which is also something Casey Reas does. If I'm teaching JavaScript, we pull up an example online and I show them how to open the console and start messing with the Javascript or CSS that's running to get to the idea that it is all hackable, and that that’s what we are learning to do.\n\nI also try to ask like who's feeling nervous or scared or unhappy or thinks they’re going to be bad at this class. I think a lot of times everyone comes in thinking that they’re the worst student in the class or that they’re the only one who is not going to get it, and sometimes I think that it is reassuring to see that everyone is terrified.\n\nOur *Social Hacking* class has special requirements. On the very first day, we have students sign a contract that says a few things. Firstly, that we are asking them to experiment but that they acknowledge that the experiments are theirs so we're not liable for their decisions. Also that they take into consideration that they are doing work that involves other people and that just because these may be art projects, that doesn't give license to not respect a person. Also that they acknowledge that we are asking them to take risks and they must be willing to do that or otherwise the should drop the class. Then lastly, that as everyone is taking risks, we need to respect that and not shut anyone down for doing so and rather we each need to respond to this. In this class everyone puts themselves out there and so we all need to put ourselves out there by giving feedback about how other people’s work makes us feel.\n\n@Heather Dewey-Hagborg@\nWe talk about conceptual art and code as an instruction-based medium. Then I have one student stand at the board with a marker, and then the other students instruct them on how to draw something. I think the student who is drawing doesn't get told what she is supposed to draw, but the rest of the class collectively decides on something. Then we go around the classroom and the students each give an instruction to the person. It’s fun and it helps them think about how specific or not specific their instructions are.\n\n@Jer Thorp@\nI think what I do is different than most people I've seen, but most of us haven't seen each other teach so we don't really know. I'm really aggressive on that first day and we do a lot of things. At that point, everyone’s brains are so pliable because it’s all foreign so we might as well talk about what a class is on that first day because they are already learning new things. I get very far with them compared to what most teachers do and I'm not in any way suggesting that they understand that stuff, but for me having taught for ten years, I've found that the longer I waited to get to the trickier stuff, the harder a time they have with it. Things start to calcify in their brains, and that flexibility they had on the first day disappears day to day to day because they are building these constructs. If I wait until the fourth session to talk about what a class might look like or what an object is, by that time they are like \"wait wait wait, no, this doesn't mesh with the construct that I've built in my brain around this.\"  So if you put it in the first day, you don't have to teach it really heavily and they are like \"Oh. Okay, that’s how this works\". I think it’s a little counterintuitive but for me, I really have found that the longer I wait to teach that stuff, the worse it went.\n\n*What about the first day of an intermediate studio in information visualization?  What does that look like for you?*\n\nMy information visualization class is half theory and half practice, and there we take a pretty different tack. On the first day of my information visualization classes, in the first half of the session, I write the word \"data\" up on the board and we talk about what that word means, which is actually an incredible little rabbit hole. Everyone thinks they knows what it means, but nobody actually knows what it means. Then we really talk about \"Where does data come from? What does that process mean? What is it? How does it manifest? What do we do with it?\" What I'm trying to do is I'm trying to get them to define what I think of as the data pipeline. Data is the result of measurement and we then parse that data using computers in some way and then there’s a representation step. I want them to make that map for me. To start identifying some places where there are interesting places to intervene. For me, a data class is not about that representation piece, it’s about the other pieces because I think those other pieces are more interesting than the representation piece.\n\nThen in the second half of the first session, I try to get the students to create a dataset on the fly and think about what that means. A simple one we do is I ask students to tell what they think their level of programming skill is between 0 and 10. Then we take those 16 answers and do a very simple plot of them and then we come back and say \"What would have happened if I would have asked this question differently? What would have happened if I would have given you a more clear way to bound that? What would have happened if I would have allowed you to share, if the first person read their answer aloud, and then the second person had to base their answer on that person?\" This gives the idea that these numbers already carry a fantastic amount of bias. Even in a really simple exercise like that, you can't really do it the \"right way\". There's no right way to do it. We can talk all we want about how to represent that data, but actually there’s a million things that have happened in producing it that have as much of an effect, if not more of an effect on what end reader will see.\n\n@John Maeda@\nI haven’t taught a class in maybe ten years now. I recall that the first thing I felt important to do was to enable everyone to get to know each other as much as possible.\n\n@Taeyoon Choi@\nI usually prepare a pretty long lecture. This gets the students who are into it excited, and also shows what the class is about to the ones who are not into it so that they can see my lecture and leave. I think this is a really good thing.\n\nAlso when I write the course description, it's usually like four months before the course actually starts and my idea of the class was completely different from the moment that I'm actually doing it. This then becomes a chance for me to realign what I want to do and what students think the class is. I rarely teach technical courses now but when I do, it's usually contextualized, so it has some conceptual arc. I explain what I can teach and what they need to learn on their own. I try to make it clear that learning technique is really hard, and it's really dependent on where you're coming from. I don't try to give them the expectation that they'll be good at technical stuff by the end of the course.\n\n@DeAngela Duff@\nI try to demystify their fears, and let them know that it's not magical and that it takes what I call \"butt-in-seat time\". You just have to really spend the time to either watch Dan Shiffman's videos, or read out of the *Learning Processing* book. I cover more of the philosophy behind programming. I also sort of quiz them and ask them why are they here, beyond the class being a requirement. I want to know why are you here, what are your expectations, and I try to get a sense of what their programming background is. We don't talk about code or anything until probably the third class. \n\nThe very first assignment I give is actually having the students create directions for something that they do in life, just written instructions. Hopefully they all have something that someone maybe isn't used to doing. I make them do that before we even start talking about code to draw upon the point that the computer only does what you tell it to do. If you're not very direct and literal in your language then the program won't execute and it's usually because you haven't broken it down in enough steps. I ask students to prepare some instructions, and then they have another classmate execute them, but they can’t discuss it. Like the person writing the rules can't talk to the person executing them. The person who wrote the rules can observe and then modify the written rules to improve the outcome. I find that a very useful prompt for getting people used to the idea that if you miss a step in the written directions, then your program won't execute.\n\n@Allison Parrish@\nIn my text processing classes, I take them straight into the UNIX command line tools. I do this because the people who take my classes usually have an OSX computer, so they have all these tools already built-in and the UNIX command line has this reputation of being like super forbidding and difficult to get into, or for hackers only. I actually think that people feel powerful after they learn about it. Once they know how to open this like imposing terminal window and then type something into it and make something happen, it feels instantly good to be able to add that to your repertoire if you aren't already familiar with it. I focus on the command-line text processing tools, tools like *grep*, *head* and *tail* and other commands that are for transforming text in addition to tools for searching through it. I really relate that back to my conceptual presentation, where we talked about work from Dada, conceptual writers and language school writers and here's how you can either repeat these methodologies or their aesthetics using these tools that are already on your computer and that really are wonderful to use. Of course I cover what this class is going to be about but then I also give them something that makes them feel good and makes them feel powerful and makes them feel like they have dug into something that's unique to this particular class.\n",
        "fullpageimage": "defaults/default_fullpage_666x522.jpg"
    },
    {
        "titles": "Most Memorable Response",
        "question": "What was the most memorable response you received to an assignment?",
        "answer": "*There may be no better proof of an assignment’s educational potential than a surprising student response. Here, we ask educators to reminisce about students who responded to assignments in ways that were subversive, or unexpected, or indicative of significant learning. These memories reveal how assignments are not only a fulcrum for student growth, but can lead to greater understanding for the instructor themselves.*\n\n@Taeyoon Choi@\nThe most heartwarming response I’ve had was when Andy Clymer from the first SFPC class saw me two years after he finished the program and said, “I'm still working on your homework.” He’s a fantastic type designer who does generative fonts and I helped get him excited about electronics. He got really into synthesizers and robotics from some of the workshops that I did. It’s funny because the workshop itself was not that successful; it was one of my first classes teaching technical things and I don’t think I was really ready to be the teacher. Still we tried to adopt a collaborative approach where the students take the lead at the end of the course and tell us what they learned, and hearing that he continued from where we left off probably made this one of my best teaching experiences. \n\n@Phoenix Perry@\nDon't be afraid to be a bitch. Don't be afraid to like, tear somebody down. Some of the most rewarding responses I’ve had have come from students who I gave very negative feedback to early on about a bad idea. And they've taken my feedback as kind of fuel for the fire and they've either proven me totally wrong, or they have improved their concept significantly by the time I see it again. For example, I had one student who wanted to make an Oculus Rift VR game and he told me his original idea, and I was like “this is total shit, I don't like it at all, it's not interesting, it's not new, I don't want you to just make a space shooter. Why use the Oculus Rift to make a space shooter? What are you bringing to this?” So what he decided to do was make a rhythm-based space shooter and he used the diegesis of the cockpit to be the control system for the game. You had to look to the rhythm of the beat, and the beat got stratified. So when the tom drum beat, one kind of object would shoot out, you would have to go look at that location to stop it. If you heard a bass drum beat you would have to look over at the other location. And doing this would destroy the object that was making the bass beat. It was really fun because then the act of turning your head, looking up and down and around became really satisfying because you were doing it on rhythm and at a pulse. \n\nAnother student project that really broke my brain, and I've never actually seen anyone do anything like this before was by a kid named James Cameron. I gave a game assignment, and he wanted to make a horror game that connected through to the real world. He made this horror video game, and it's a really terrible scenario, like a murder has occurred, and all of a sudden you see a phone in the VR, and when you touch the phone your actual cell phone rings. Then the characters start calling you and leaving you messages during the day and they’re prompting you to kind of play this story. That was really amazing even though his original idea was not spectacular. I was really hard on this kid in his exams, like he missed a semicolon on something and I drew a pirate and said now walk the plank. I think sometimes teachers want to make students feel really good and sometimes that's not the goal. Sometimes you want to make them question if something is worth their time and how they can bring something new to it. \n\n@Lauren McCarthy@\nFor me, the things that are the most memorable are usually less about the output and more about the process. Like seeing that student who is really struggling in the first few weeks, and then every week, rather than just doing the assignment she does five versions of the assignment. Then by the end she's a great programmer with a really strong concept in her final project. That’s the sort of thing that really sticks with me. \n\nIn terms of specific responses, one of my students did a project when she was just learning to code where she would go up and ask people for their Processing sketches, like the code itself. She would then try to draw by hand what the outcome would be and after would run the sketch to see how close she could get. \n\n*That’s novel, and courageous for a beginner.*\n\nYeah. Let's see, another one which is not such a crazy concept itself, but I really liked where the two students were coming from. The project was called “Not lost in translation” and they basically made a chat app for themselves. They both spoke English but with a strong accent. And they felt like people didn't understand them a lot. They first just wanted to make something that would translate into the opposite language but then when they hit some technical barriers, they changed their concept so that you would speak, and you could choose English or Indian, or Korean, or whatever language you are speaking. And then it would do like a Google Translate of that, and then a Google image search. And then it would just show the other person a pictogram of what they had said. And then the person would respond by speaking and it would show a pictogram. So the result is totally nonsense, but it was nicely executed. \n\nThen the last one I remember was my student Ben Kauffman’s response to the API assignment, where you have to make some aspect of your life controllable. His project was super simple; if you messaged him with the hashtag “#brainstamp” he would pull a postcard out of his pocket, mark down whatever he was thinking at that moment and drop it in the next mailbox that he saw.\n\n@Zach Lieberman@\nMy department head asked me to teach a class on artistic data visualization, and I’m a fan of *artistic* data work but I’m not a fan of much data visualization and so I was conflicted the whole time I was teaching it, and I really brought that energy into the classroom. But in that class there were folks like Evan Roth and Chris Sugrue. They took these prompts and really created art works out of them. Things like Evan Roth’s project, *NWA Explicit Content Only,* a record composed entirely of swear words extracted from a rap song. They took the prompts that I was giving them and created things that would stand in a gallery or would be written about in a blog. \n\nFor me it's really exciting as a teacher when your students create work which is noteworthy, work that gets people writing or talking about it, because you start to see that feedback loop with culture, which is great. As a practitioner there is a feedback loop of making something, reaching an audience and getting feedback from it, and that cycle helps you understand the value of what you do. It’s otherwise really hard to understand the value of what you do. For me the most exciting prompts are the ones that result in work that makes it out there in the world.\n\n@Luke DuBois@\nIn my creative coding class, I do an assignment where I show the floor of the Alhambra Palace and explain how it's a Lindenmayer system. It can be re-created with an L-system. I then give them a basic turtle graphic sketch in p5.js and give them a couple ideas for how to do Lindenmayer systems and a bunch of links, and tell them to figure it out. I had a student L-system his way toward like a perfect replica of this mandala that's in some crazy 3rd-century CE Hindustani Temple in his hometown: Calcutta, if I remember. He remembered it, like he knew it visually and he was like “there's got to be a way I can make this thing”. It's kind of like a space filling curve, like a Koch Curve, so it's not too hard to do. Most of the kids made these weird turtle graphics things, mazes or Sierpinski Triangles or some of those bullshit fractal 101 things. But this kid showed a Google Earth photo of the temple, an image of its ceiling, he hit play on the sketch and walked away. What really stood out was the personal connection he had to the form, which clearly motivated his craft. All the other kids were just like “fuuuuck”. \n\n@Allison Parrish@\nIt was by my student Susan Stock, and it's a program that produces a poem. It's based on a poem that she wrote about a friend of hers. She took the poem that she wrote and she passed it through this procedure that randomly repeated small segments of the text, so that it feels like her record is skipping. It keeps on moving back into the text so that it has to kinda catch up to itself. It’s called *Susan's Scratch*. And she gave this reading of it in class and it was really affecting, because it was personal. I think that with procedural art in general it's harder, or seen as less desirable, to get at the lyrical, the emotional or the personal. I don't think a work has to be lyrical, emotional, personal for it to be good or for it to be affecting, but I think what was new and interesting about this piece is that it did. It just had that on the surface. She also showed us what it was based on and it was clear that the procedure brought out something in the original text that wasn't there to begin with. The procedure was both an interesting way to read the original text but then also added an additional layer of lyricism on top of this already lyrical text. \n\nI forget which assignment this was made in response to, but I think it was for my midterm assignment, which is to invent a new form of a poetry and then write a computer program that attempts to write poems in that form. The thing that I remember is that once Susan  presented this, it was like a switch flipped in my head. I realised I can teach my students how to make jokes with this, I can teach my students how to do data analysis with this stuff, I can teach my students how to be postmodern jerks with procedural text. In fact that stuff becomes easy, like satire and that kind of thing. *Susan's Scratch* just made me think: Oh wait a second, the emotional range of this is like way way larger than I had originally conceived.\n\n*And of course computers are rarely framed as emotional or for exploring emotion, they are not perceived as having enough ambiguity or unpredictability.*\n\nAbsolutely. I think that's understandable considering the history of the medium. People in general don't think that systems can be expressive. They're not perceived as having intentionality almost. People often don't see the act of making rules as being same thing as like the act of writing a poem. And this is sort of what I am trying to attack in my teaching. To say that actually, the process of designing a computer program, designing a poetic form or designing a game, these are all processes and the system that creates these artifacts is itself a thing that can contain lyricism and emotion and a personal point of view. In fact, it has to have a personal point of view and we shouldn't ignore the personal aspect of that kind of making.\n",
        "fullpageimage": "defaults/default_fullpage_666x522.jpg"
    },
    {
        "titles": "Encouraging a Point of View",
        "question": "How do you encourage meaning-making, criticality, perspective, and heart in otherwise technoformal education?",
        "answer": "*“More poetry, less demo.” This is the motto of the School for Poetic Computation (SFPC) in New York City, an artist-run school co-directed by Taeyoon Choi, Zach Lieberman, and Lauren Gardner. The motto encapsulates an expanded ideal for the education of computational literacy: one which frames “learning to code”, not as mere vocational training, but as instrumental to cultivating a student’s critical perspective and expressive voice. In this scheme, “creative coding”, by analogy to creative writing, is an essential practice. Simultaneously, this motto also encapsulates the rejection of a prevailing technophilic attitude: one characterized by technological solutionism, a seemingly apolitical preoccupation with “disruptive innovation”, and the narrow objectification of programming education as an economic stimulant. The SFPC motto is also, in its own modest way, an aspirational rebuttal to some older critiques of computer art as “cold”, “impersonal”, and “inhuman”. In this section, we ask educators how they work to ensure their students’ focus on making meaning, as they strive against the grain and traditions of technoformalist tendencies in programming education.* \n\n@Zach Lieberman@\nI try to bring in as many outside examples of things that I think are important, even if they are things that are not necessarily made with code, but artworks or visual ideas or projects that inspire me. I think you get heart by showing heart: show stuff that is important and has heart to it. A lot of teaching is about articulating values, it’s the public articulation of values in a classroom, and that helps students understand your value system. Maybe they have their own value systems or interests, but seeing your curiosity, and what you think has heart, helps them bring that into their work.\n\n@Phoenix Perry@\nThat's a really hard question and one I think about a lot. I try and give my students artists to look at who I think are doing meaningful work. I try and seed them with essays or things to read that include those kinds of ideas. I try and get them to think about the way code works in culture, and the way they're learning how to use this material in a context.\n\n@Jer Thorp@\nI've been lucky to teach programming in environments where people want to find meaning in the work. I throw a lot of theory and a lot of reading and a lot of weird stuff at the students. Often I assign a novel that they have to read during the class.\n\nIn the past I’ve assigned Gary Shteyngart's *Super Sad True Love Story* and normally, the response is overwhelmingly \"oh that was great! Give me more of that\". Almost nobody says, \"Please teach me more technical things.\" The response is almost always \"let’s get into the weird stuff more.\" I would encourage people to think about ways to do that, even in a basic programming class. Give small readings. There’s some great Pynchon passages which are so good for this type of thing. Ask them to make something in response to that, to remind them that it’s not all about the computer.\n\n@Lauren McCarthy@\nI like to show a lot of references and artworks that have nothing to do with code, especially when I'm giving assignments. I ask students “what would this be like if we were doing it with the tools that we're using? How would this idea manifest?” I also put a really big emphasis on context, especially as we get closer to the final project. For example, they are required to come up with several examples of influences or other things that inspired their work beyond the “I learned how to make a for-loop or I went to office hours” type response. This is often really hard for some people at first and when I ask their inspiration, their response is literally “office hours with the residents.” So I always say: “keep looking!”\n\nThe web is also a really ideal social context for sharing and publishing work. We taught our intro class with the web this semester and it was cool because people are already so familiar with that space. They know that context from everything from websites, to news, to ads, to videos, to art pieces. I also try to bring in news and current affairs, like “hey, this lawsuit is happening, or this new regulation got approved. What does that mean for us?” Trying to make them realize how they are a part of the world.\n\n@Daniel Shiffman@\nOne approach that I have is that early in the semester, I tell them, don't worry about making a *magnum opus*, you don’t have to make a really important, meaningful thing: just kind of play and explore. Let your work wander, and in that sense, have a kind of free spirit while you're doing your assignments. It's okay to focus on, “I just want to try this thing with a for-loop, because that's what we're learning and I don't want to get lost in my own head about having to solve this climate change crisis, I just want to play around here with a for-loop.”\n\nSo it’s OK to free yourself of the ideas at some point, and then, and this often happens at the end of the semester, flip it and free yourself of the technological requirements. I always offer to students “you don't have to use code for your final project” but nobody ever really takes me up on this. I say, “if you have a project that came out of the ideas we're talking about and you're excited enough to make it without code, go for it and explain why.” I'm sure that the process of a student explaining why they’re not using code would show there's probably a good reason. \n\nThe other thing is students get really lost in is, “but I think it's so simple, I feel like it needs more.” But you know, it isn't bad if it's simple, that can be good. Worry about your idea or what you're trying to communicate at that point and forget about the technology.\n\nWhether that works or not, that's my kind of approach. It's like trying to be at either extreme in some sense.\n\n@Heather Dewey-Hagborg@\nThis is something I have really struggled with in a programming class but I feel like I really nailed it this semester in my *Intro to BioArt* course. I think it’s a really relevant question, because the BioArt class is a very similar challenge in that I'm trying to teach technical skills but I'm also trying to teach something that students don’t really know anything about, and trying to bring in critical and ethical questions along with that. The way that I structured the BioArt class is around four projects: three topical projects which each involved several sets of skills, and then one final project. And I want to import this to a programming class as well. Each project is a module, and then each module had a set of critical readings to frame the conversation for which the students had to write a page. Before we came into class they would discuss the readings and I had them all submit a very short essay the day before just to make sure they actually read it and thought about it to the slightest degree basically.\n\nThen in class I went through their writing and pulled out one thing from each student’s writing and tried to bring that into the conversation. So before we actually started working hands-on with the materials and the methods of the technology, I tried to frame it with those critical questions in mind.\n\nThen when they started on their final projects, I also tried to bring those questions from the readings they critiqued, back into the discussion of the project. It was very natural this time because the students had already been thinking about these issues a lot and so as they started proposing projects or sharing their work, the questions naturally came into the critique from all directions and not just from me. I feel like I‘ve grappled with this question for a long time when teaching programming and even during the last semester with the BioArt class. This was the first time I think I've ever come kind of close to getting it right.\n\n*It seems like your solution is to provide preparatory readings that provide a critical starting point.*\n\nYes, but also treating these as equal to the other skills being learnt in the class. Making sure that students are being held accountable for doing the readings, and that we really set aside the time in class to give it the proper discussion so that it doesn’t just feel like it’s bonus material or optional.\n\n@Taeyoon Choi@\nThat is a really good question because it's easy to retreat to this mode like, “we are going to help you become a coder, we’re going to help you become an expert.” But to me that sounds as thin as, “we are going help you become good at Photoshop.” I think the real question is about finding a desire within students to master the language of the technology. It's code and electronics and all of that, but it's really about expressive literacy. I want them to approach code and technology as an artistic medium, so they can not only overcome the psychological barrier of “I can't do this” or “this is not for me”, but also be creative with the medium. \n\nOne thing I like to do is give exercises that are as simple as possible. For example, one button, one output, like pressing a button that lights up LED, and putting delays in between. I like to show that you can make a lot of meaning with very little technology.\n\n@Luke DuBois@\nI mostly have engineering students, and the hardest part of teaching engineers is to get them to know that they are allowed to ask questions too. That they are allowed to draw from their own lived experience and problematize a situation. These things are not normalized in their educations so they’re flying blind when you ask them to do that. \n\nWe have hybrid classes, such as one around developing assistive technologies. It’s an undergraduate STS style disabilities studies class that requires client-centered design and we do it in partnership with United Cerebral Palsy of New York. We put two undergraduate engineers on a client, so it could be computer science students, it could be civil engineering students, or others. And the first that thing they have to do is they have to make a documentary film about their client. They have to make a movie, and that helps teach empathy, and then they have to make a design intervention. \n\nA problem with engineers is that they’re trained to always go for the most general solution of a specific problem. But that doesn’t really work in this context so instead of saying, “you’re going to make an adaptive wheelchair thing and we are going to patent it and we are going to get it approved by the FDA”, instead, it’s more like: this is Steve. Steve has cerebral palsy, Steve has residual motion in two fingers on his right hand, Steve needs an umbrella. Now design that for Steve. That’s an actual example of a real case, and they created this mechanized umbrella. In the ability lab, we often do “design for one”.\n\nWith societal-scale problems, solutionism falls apart really fast and that’s a really useful lesson for undergrads. To understand that you can’t necessarily fix things by building a better widget. So we encourage “meaning making” with our engineers by giving them problems that don’t or can’t have exclusively technological solutions. I’m not as good at this as my colleague Dana Karwas, who is really good at pushing them to reveal aspects of their lived experience and to riff on that. Dana does a lot of activities with her students to help them address things that have happened in their lives, often bad things, and it’s a way of distilling art out of shit.\n\nThe hardest thing with critique is that engineering students are grade obsessed. You have to get it through their heads that critique is not necessarily about mistakes, criticism is not about pointing out flaws, as in bugs. It doesn’t necessarily mean “you failed” or that you did something wrong. It just means that you did something that someone has a question about, and that’s hard to get around. \n\n@DeAngela Duff@\nI'm really big on creative authorship and I try to give them a lot of freedom. In any class I teach I try not to give closed-ended assignments. Of course this can be a problem as for some people absolute freedom can lead to paralysis so often I find I have to give them some kind of constraints. But what I think is important is meeting them through their own interests. Try to figure out where that is, whether that’s color or that’s texture or sound or whatever. For their second major project they basically pitch to me what they want to do and of course some of them are overly ambitious, meaning I kind of know they won't be able to do it. But I think that if they reach far enough they'll get somewhere interesting. It’s really important to be engaged in what they're interested in creating beyond the code.\n\n@Allison Parrish@\nI am personally very excited by systems and by rules and by the act of putting things together programmatically, sometimes like a poet but first and foremost like a computer programmer. When I'm teaching classes it’s similar in that my courses are about making computer programs produce creative text towards an aesthetic end. Remember, trying to get a program to imitate a poet, or exploring the expressive possibilities of procedural composition, is something that me and like two dozen other people in the world think is interesting enough to base an entire career or an entire class on. In order to get that quorum of interested people, I have to focus a lot on the technical aspects and say like, “we're going to learn this thing that is applicable to all this conceptual stuff, but we’re also going to learn how to make a dictionary or learn how to parse text into parts of speech.” I think it is interesting for creative reasons but many students in the class think is interesting for a completely different reason. Of course I would love to be able to teach a class where every single student in the class is completely devoted to exactly the same concepts as I am and is motivated by exactly the same things that I am, but that would actually probably be boring. I really try to keep it half my weird conceptual ideas and half programming tutorials. The conceptual stuff is what allows the programming stuff to be applied in a way that’s not just a technical worksheet that demonstrates mastery. \n\n*You also require your students to perform their work in public. Why do you do that?*\n\nThat’s for a couple of different reasons. The first is that text as a medium has all of these affordances and one affordance is that it can sit on a screen, another is that it can be on a printed page and another affordance is that it can be transmitted into language and read out loud. I think it would be a disservice in a class that’s about language, to only use the one affordance of text on the screen. People don’t usually think about procedural text as something that you can read out loud but when I have the students read their work out loud they learn new things about the text. It’s like having another window into the language because when you read text out loud you find out the places where you have to breath, what sequences of words sound really good, what sequences of words trip you up, how long it takes to read. When you’re reading out loud you also become like hyper-aware of other people’s reaction. You can literally see when people get bored with what you’re saying and use that in the feedback loop to bring that back in and ask “how am I going to compute a textual artifact that has a different curve when it comes to how people are paying attention to it? How do I maintain attention? Or, how do I like make something that’s boring or or whatever.” I also find that it keeps students a little bit on task and and focused because it means that students take a little more responsibility for their work. They know it’s not just something that’s gonna sit in a blog post until the end of time. They know that for two to five minutes of in-class time they’re actually going to have to be there, in their body, allowing their body to speak this text out loud. I find that that makes the work a little bit more thoughtful and a little bit more interesting.\n",
        "fullpageimage": "defaults/default_fullpage_666x522.jpg"
    },
    {
        "titles": "Your Worst Day",
        "question": "What happens on your worst day?",
        "answer": "*Code is a brittle medium. There’s a steep cliff of failure; a simple, easy-to-miss syntax error will often prevent a program from compiling altogether. All software educators will experience this publicly at some stage and find themselves sweating in front of a room full of impatient students whilst desperately debugging. Teaching media arts also demands that one constantly keep abreast with ever-changing development environments and new technologies, many of which are likely to be peripheral to the instructor’s primary field of expertise. Meanwhile, operating systems update themselves, familiar tools abruptly become obsolete or incompatible, and cherished references unexpectedly disappear from the internet. For these reasons the creative programming teacher is particularly prone to having to work through mistakes and errors live in the classroom, often while attempting to maintain the interest of skeptical and apprehensive pupils. Our respondents discuss the days when stuff breaks, nothing goes right, and they can’t maintain the encouraging illusion that learning is easy.*\n\n@Daniel Shiffman@\nI have moments where nothing is working, and I can't figure it out but apparently these moments are useful. People tell me this about the videos all the time. Like, “my favorite part was when you couldn't figure it out and you got stuck for like 10 minutes, because I like to see how that happens to everybody, or I like to see the way you tried to fix it.”\n\nEven so, these moments can be really bad and stressful. There’ve been times when I get completely tripped up in my own head. Trying to explain something like a Markov chain and just feeling like, “That was the worst explanation ever, it made no sense! I should have practiced that.”\n\n*It's interesting how you practice your explanations. It's very obvious in your case, because you live this out more publicly than the rest of us through your video channel. It’s quite clear that all of your explanations are very patiently refined and revised through practice.*\n\nI've been doing the videos for a while, but recently they clicked for me as I was just more mentally focused on them. I used to do the videos to get ready for class but now I use the class to practice for the videos. I’m like those comedians who go to a comedy club to like try material out before their TV special.\n\nAlso, if I have the same class that meets two days in a row, I can never have them both go well. It's either the first day is amazing and then I try to force that to happen again the second day and it fails. Or the first day kind of goes haywire and so it sort of motivates me mentally to fix it all the next day.\n\n@Luke DuBois@\nI’ve had classes where things just fail. My first attempt at setting up a cloud-like Node server was the perfect storm clusterfuck. I wanted to show how to do a socket IO thing where we could all kick something up to a cloud thing and get a response. And that fucker just didn't want to work. I had some problem with my .ssh directory, that wouldn't allow me to log into the thing and it took me 45 minutes to debug. Well it felt like 45 minutes. It was probably only 15 minutes, but it was right in front of the students. Node is super tricky because of the whole Node package manager thing. I hadn't shown them Require yet so you couldn't just run an NPM install on their scripts. Everything was a mess. It was bad. \n\nOn the music side I once taught a terrible, terrible class involving a Disklavier [digital piano]. There was a switch on the back of the Disklavier, that was not correctly set to allow it to take external MIDI commands without a 500 millisecond latency. They built this into the hardware to prevent feedback, to prevent you from hitting a key and then getting drilled down and grinding the whole thing and breaking it. The default is that there's always a half-second delay on the song, and there's a safety switch that you flip off, and I could not for the life of me figure this out. I had this beautiful piece of repertoire by Kaija Saariaho who is the composer laureate of Finland and has a really great Disklavier piece. And I, Luke DuBois, with four years of piano and graduate studies, can actually play this piece as it's not hard and it's part of an undergraduate pedagogy study she wrote in the ‘90s. It's like, you play a note and then it kind of arpeggiates the rest of the chord and then you have to complete the top note and I can do it. But I couldn't get this fucking 500 millisecond thing off and I went ballistic on the piano. I went into this psychotic cursing fit, where there was no stopping me. I sounded like fucking Don Rickles at one of those comedy roasts in the ‘70s. I was like, you lousy fucking half-assed goddamned piece of shit, I'm going to fly to Tokyo tonight and single-handedly beat the shit out of the entire drum, guitar and motorcycle division of Yamaha for hoisting this piece of garbage on us. That was my worst day of teaching.\n\n@DeAngela Duff@\nThis is not necessarily my worst day but more a realization of something that was not working. I used to go through a lot of code in class, like line by line, and I would dissect code and explain it. When you know how to code, it's clear as day, but it's like noise for the newbies. Many of them create this narrative in their head that they're not good with programming or they’re not good with math. Then I’d ask somebody in the class ‘tell me what I just said’ and they can't even regurgitate it one minute after I said it. I realized that actually explaining code line by line is such a waste of time. So I guess my worst days were those days when I thought I was teaching something but I wasn’t, it was all just noise.\n\n@Allison Parrish@\nI think the worst days for me were the days when I was teaching a programming class in the English department. I had lost half the students, like half of the students were not really keeping up with the content of the class but I still had this very strict schedule that I wanted to follow so that the class could reach its conclusion conceptually. So there were one or two days when I was just like gritting my teeth and doing the tutorial even though I knew that half the students weren’t able to follow along. \n\nMuch of my teaching experience has been in grad school environments at schools, like ITP where the students are so internally motivated to keep up and wanting to extract value from the class no matter how poorly it’s coming. Undergrads on the other hand will check out if you are not connecting with them. At least that’s my experience. So having that experience in the English department and having students check out on you for the first time kind sucked a lot. But I learned from that experience too.\n\n@Lauren Mccarthy@\nI think it is worth saying is that as a teacher you are there to motivate and encourage everyone and sometimes that’s hard. It's tiring, and it doesn't always feel OK to admit that. In other jobs somehow it feels easier to talk about how it's hard, and I guess we do that too sometimes with fellow teachers. But often it feels like there is a pressure to always be like: “Hurrah! Everything is great!” Maybe that's a buzzkill but I think it’s good to say sometimes.\n\n*I agree, it feels like you can’t show weakness in the classroom. You’ve got twenty students waiting and you can’t say, “guys, I’m having a bad day”. Or perhaps it is one of those days when you're not quite prepared, and you just have to roll in and wing it. You haven’t got the Julia-Child-almost-finished-cake in the oven and instead you have to program in front of them, while typing in front of them, while talking in front of them, while thinking the code through in front of them, while clearly explaining what you are doing. And, then some stupid shit will happen, someone has changed their API without documentation, an old library hasn’t been updated, the school’s software administration restricts the installation of a critical driver and everything just gets borked. In front of your class. Those are the worst moments I know as an educator.”* \n\n@Jer Thorp@\nI taught a programming class for a few years at Vancouver Film School. It was a required class, and that sucked as half the students didn't want to be there. You're always able to recruit some of them, but some of them don't care. This is a school where most of the parents pay the tuition and throw them in there because the kids didn't know what they want to do, and so they don't care. Being in a roomful of students who don't care is really hard, even though I think I'm pretty good at getting people who might not otherwise care to care.\n\n@Taeyoon Choi@\nI once brought resistors to class to make a flip-flop memory unit. It's made from just two transistors, two resistors, and one LED; it's a really simple component. Some of the resistors are colored brown, but they can look red when it’s dark. So I brought the brown one, which had a different value than the red resistor, and none of the examples worked in the classroom. I was going nuts because I tested it so many times, and I think I might be a little bit colorblind or maybe I was in a hurry, but nothing worked for anyone. It was so frustrating and I was just sweating like crazy and I was so embarrassed. And oh my god it was terrible, not only because it made me look bad but it discourages students from exploring electronics and technology.\n\nAt the start, students need to have have immediate feedback: like, *the thing should work*. Luckily I figured it out at the end of the class and some students had resistors of the right value and we switched them and everything worked. But I was definitely underprepared and got totally lost, and was hating myself for not being prepared.\n",
        "fullpageimage": "defaults/default_fullpage_666x522.jpg"
    }
]