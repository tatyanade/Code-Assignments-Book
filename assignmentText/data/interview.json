[
    {
        "question": "Do you have any advice for first time educators teaching programming in an arts context?",
        "titles": "Interviews: Advice",
        "answer": "Taeyoon Choi\nTeaching a very small group of people can be really good, like maybe less than five people and if that ever happens it is actually a really prestigious opportunity or perhaps you can try it if you have a working group and run a small workshop. I also think drawing is really helpful. I draw a lot before the class and during the class and I sometimes draw the same thing over and over again. The idea is that I'm performing a drawing and it gives the students the time to think with me about how knowledge is processed. I encourage them to make drawings in their sketchbook as well and then they end up with their own textbook in a way. An explanatory text that they processed themselves.\n\nIt’s also really helpful to understand that not all students are going to appreciate what you teach. If I get like twenty percent of the students really excited about what I do, I call it a good day. Teaching is a really difficult thing to do.\n\nPhoenix Perry\nMy advice would be to discourage people from working with people they know. Try and get people to work in groups of people where they might have to be exposed to new ideas or new kinds of things. The other piece of advice I would give is to be really careful when you start seeing bro culture emerge. When you start seeing the classroom segregate and the women start fetching coffee and the guys are doing the code, or even where the women are doing all the art. Be really careful of that and remain very cognizant that it can happen.\n\nFor me the biggest problem I have is not the part involving dealing with students, that's really easily done once you learn to balance the energy in the classroom. The real challenge is realizing that there is a level outside that which is how you deal with the fellow staff, how you deal with college, and how you get to keep teaching. You have to work out what an academic career actually looks like outside of the classroom because that is how you get to keep your job.\n\nFor example, if you check in and check out and teach your class and get good reviews, that's not enough to ensure you get to keep your job in academia. You need to be very visible, you need to be integrating into the community, you need to be participating in publishing papers, you also need to be making allies and friends in your department and you also need to be building relationships with the administrators so when a class opens up they know who you are. That is really important, particularly as the adjunct model becomes more and more widespread. As full time jobs become less and less sure, understanding how a professional career or research career can connect through to a teaching practice is really important as well as how to communicate that outward. I'm a good teacher and I always get good reviews because my students like me. Of course I've had a few exceptions where classrooms just didn't jive with me, but normally I am a rock solid teacher. But for any permanent roles, keeping a job is always really difficult. I always knew I was going to get to teach, but in places like NYU, it's like game of thrones. Everybody's a rockstar so what makes you stand out from all the other rockstars is your attitude with the administration and how you help the department meet whatever objectives they have on the bigger scale.\n\nJohn Maeda\nLeave academia as soon as you’ve learned all that you had hoped to learn. I did!\n\nJer Thorp\nGet students making as soon as you can. For me that’s like 10 minutes into the class. We write a really simple 4 line processing sketch that does something really easy and get them there right away. Don't stop to talk about what the IDE is and what syntax looks like, and what a semicolon means. That stuff sucks. You need it but it sucks. Do the making first, then use that to go back and talk about it after.\n\nLauren McCarthy\nLauren: Something that I read, that really stuck with me is that the brain is setup so that as soon as you figure out something that was confusing you, your brain immediately forgets what it feels like to be confused. Your synapses will fire in a way so that your not confused anymore. So you learn the code and it clicks. You ride a bike, and then you can't remember how to not ride a bike and for that reason, it's sometimes really hard to remember how confusing that feeling of confusion is. So my advice is something I always try to do before office hours, and that is I to try to think about something that's really confusing or I try to like imagine myself back in the lab as a student, when I used to just sit there hoping someone would do my homework for me. I really try to tap into that feeling of frustration, that confusion when things don't just click. And not just like A=7 da dah! But that feeling when each step needs to be a moment of understanding. By trying to take yourself back there as a teacher, particularly if there's a lot of students you need to help, it just helps you connect with them more.\n\nTega: That’s so interesting. Many times when teaching a class for the first time, especially if it’s something slightly out of my skill set, I’ve had unexpectedly good results and reviews. Then once I’ve taught it a few more times and I know the material really well, it's harder to empathize. After those first couple of times I often feel like I'm actually getting worse at teaching it which is really not intuitive at all. So as first time educators your inexperience can actually be a positive thing, because you are more likely to relate to students and understand what they are going through.\n \nLauren: Totally. I think the other thing is just modeling belief as this can change student’s world. I think probably everyone who has ever done something or been successful has had someone who believed in them and made that clear, and helped the student understand how to believe for themselves. I think about that a lot.\n\nThe other thing that I think is worth saying is that as a teacher you are there to motivate everyone, you're encouraging everyone, everything's great, and then sometimes it's hard. It's tiring and it doesn't always feel ok to like admit that. In other jobs somehow it feels more ok to talk about how it's hard, and I guess we do that too sometimes as teachers. But often it feels like there is a pressure to always be like: Hurrah! Everything is great!\n\nI don't know, maybe that's just a little bit of a buzzkill for your book but I think it’s good to say sometimes.\n\nGolan: Yes, you can't show weakness in the classroom. It's like you’ve got twenty students here so you can’t say, “guys, I am having a bad day”. Or perhaps it is one of those days when you're not prepared, and you just going to roll in and wing it. You haven’t got the Julia-Child-almost-finished-cake in the oven and instead you have to program in front of them, while typing in front of them, while talking in front of them, while thinking the code through in front of them, while clearly explaining what you are doing. And, then sometimes some stupid shit will happen, and just everything gets borked. In front of them. Those are the worst moments I know as a teacher. Those can be really tough days.\n\nDaniel Shiffman\nWell I continuously make the same mistakes over and over again and one piece of advice I have is to do a lot less than you think you can do. As a long time neurotic, I am a way over-preparer. For example, I was teaching a new class this semester that I ended up making 30 examples when there was only time to look at like two or three in class. Then in this situation in the past, one thing I have often done is to assume that because I made all this stuff, I have to get to it all. Then when there's only 10 minutes left of class, I would try rush through the rest of it. In my opinion, it’s definitely much better to not do this. Instead, slow down and leave stuff out. You can always get to it later, or you can send out an email, or not do it at all. I think doing less each class and allowing yourself a slowness is really important.\n\nObviously I've been doing all the stuff with videos and that’s part of an attempt to create an environment where there is some quality of self-paced learning. If you can do this or foster some collaborative learning where the students are working in smaller groups or individually in a kind of workshop setting, it’s a really good thing. Much better than rushing through a lecture and showing like 500 examples in 15 minutes.\n\nHeather Dewey Hagborg\nHmmm...  I would tell them to try to teach to what they are enthusiastic about - to what they actually care about. If the technical matters less than their enthusiasm for the subject, then they shouldn't feel like they have to get up there and lecture about code. It’s possibly to engage students in lots of different ways and most important is to share what is exciting about the practice of programming.\n\nWhen I started out as a freshman, I really didn't have any kind of interaction with technology whatsoever, in fact I was probably pretty anti-technology. Then in my freshman year I took a conceptual art class that included a lot of references to media art, the beginnings of Dada and Fluxus and that leading into installation and into some new media work and that got me excited about learning some of the tools of new media which led me into doing some work with sound and video. Then as I started working more with sound in particular, I felt very distant from the medium. Having come from a more materially engaged practice like sculpture and installation, I felt like when I was working with sound I was removed from the material. I was using a software interface but I felt distant from it so I signed up for an introductory programming class, a python class. In part, I signed up for it because of the title which was Thinking with Objects, and I liked that because I thought it sounded very physical and visual. Of course I didn't know it just meant object oriented code but luckily the professor was really fascinating. A brilliant brilliant man who even in that intro class, starting tying the code into ideas about neural networking and genetic algorithms.\n\nEven though we were total beginners and we couldn't quite understand what he was saying, he provided these very visual explanations of neural networks and of organisms and I found that really exciting.  Again, I probably would have never continued with it except that he specifically came to me and said \"you should consider taking the Artificial Intelligence class\".  If he hadn't gone out of his way to invite me to take this class, I would have thought I wasn't good enough to do it, but because he did I became curious about it, and then took it and really loved it. That is what launched me into this whole algorithmic direction.\n\nZach Lieberman\nI always say every time I give out a homework assignment that every homework assignment is an opportunity for genius. The most important advice is to have that sort of optimism, having that sort of energy for your students with every prompt and every time you ask them to do something or engage in something. Learning code can be frustrating and it requires a lot of time and a lot of failure. Time and failure and misunderstanding. To imbue a sense of optimism here is so important. To celebrate this as a new mode of working and to help students to realize that there's all these untapped ideas out there.\n\n\n"
    },
    {
        "question": "What’s your favorite computational art assignment to give to students?\n",
        "titles": "Interviews: Favorite Assignment",
        "answer": "Daniel Shiffman\nLet me preface by saying that sometimes I feel like assignments are my weakness. One of the tricky things I try to balance is having a feeling of open-endedness, with having constraints, so that students can feel creative and make their own thing, but the assignment is not impossible.\n\nI have two assignments to share, one is from the Nature of Code course materials and it’s for more of an advanced scenario, for somebody who's already taken a full semester of programming and who's now launching into learning about motion, simulation, nature and physics. The assignment is to build your own ecosystem. It's really not a single assignment but a thing that you might do over a long period of time. The first thing they learn to do is to make this one little thing move around the screen, and then later they might figure out how to make 10 of those move around the screen. And then later they might figure out how to make those 10 things see an obstacle in the environment and then also see each other and bounce and interact with each other. So there's kind of this idea of building this whole ecosystem out of these little miniature parts. I really enjoy seeing what kind of strange world people will create, that either mirror things in our real world or are fantastical inventions.\n\nThe other thing I really love doing in an intro class is anything that fosters collaboration. It's really hard to do and is a much easier thing to pull off in a physical computing class, although I don’t actually teach that. But what I’ve observed is that when you're building something physical, seeing where the collaboration comes in is more obvious. When learning programming, students tend to think they have to work solo on code projects, when actually, large pieces of software are built by teams of people. So one of the assignments I really like is to randomly partner students and have them exchange bits of code and you get these kind of Frankenstein monsters, like, “I made the sun rise,” and “I made a fish swimming, and now I have a fish swimming through a sunrise.” That kind of thing.\n\nGolan: It reminds me of an assignment that John Maeda gave a long time ago, which was to take someone else's assignment from last week and improve it or modify it.\n\nDan: Right. And where this can also work well with is when teaching object-oriented programming. I really like to say, “make your class and then give it to somebody else to make objects from inside of their world.” What I love about that is not just this idea of collaboration and talking to somebody, but that it also teaches about open source development and library making. Students can’t just give somebody else their code, but they also have to explain what all the functions do and invent their own documentation, whether that's just explaining it in an email or with good code comments.\n\nObviously if you were teaching a more advanced class, you might have the class use GitHub or whatever, and create a documentation page. I like trying to keep that spirit of collaboration, learning how to exchange code and also learning about object-oriented programming. All of that works well together. I think I like that assignment better than the first one.\n\nJer Thorp\nI wish I had a really clever answer for this, but the thing that works the best on the first day of teaching creative coding is the “drawing tool” assignment. There’s something really rewarding about making a drawing tool because you can quickly get at what makes computational assistance powerful and students also get something that they can share very quickly. One of my big strategies for teaching designers and artists how to code is to get them making as soon as possible and associated with that is sharing as soon as possible. I want them to have something that they can post on their Facebook or Twitter feed at the end of 3 hours and because they are proud of it, they get that little buzz. People are like \"This is great!  How did you make it?\" and they get to say \"I'm doing this\". I think that where teaching programming goes wrong and it often goes wrong, is that this moment comes in week 5 or something. At that point if you’ve survived 3 or 4 weeks of not making things, you’ve already self-selected a group of people that maybe we don’t need to be self-selecting.\n\nSo for me, within an hour of the first class we have a really simple drawing tool going. The one where it draws a line from the middle of the screen to the mouse position and they can draw little spirals with that. Then I do another one right after that where it draws grass as you draw with the mouse and given that, I say create your own drawing tool. One of the other reasons I think that it works so well at the beginning is that it gets people into this idea of the modularity of programming.  I say to them \"let’s look at the command to draw a line and the command to draw a rectangle.\" Even though one draws a line and then one draws a rectangle, they both take four numbers and so they're actually interchangeable. I can just drop the arguments for one into the other. In the beginning of my first 2 - 3 classes, the big focus is to get people to repeatedly ask, “every time you see a number, what would happen if I put another number in there?”  And every time you see a method to think \"What would happen if I put another method in there?\"  Because that’s where this stuff becomes exciting. Through the grass drawing program we learn a little bit about random and then we can go back to the old example and put in random for the line width or they put random in for the other positions. I want to get them into that lego method of programming as soon as possible and to see programs not as things that are crazy glued together but as things that can be taken apart and reassembled.\n\nGolan: Now let’s tweak the question. What are some of your favorite prompts, specifically in the field of information visualization, and maybe prompts that are not necessarily for beginners, but prompts that can be approached by anyone at a lot of different levels, including advanced or intermediate students?\n\nJer: In an information visualization context, the one that works the best is to take location-based data and ask students to do something with it that is not allowed to be on a map. I could build a whole course around this assignment. In my data class students take a big data set of something that is primarily latitude and longitude. But I don't let them plot that on a map so they have to take those things and plot them in some other way and that’s really nice because it kind of frees you from constraint. It’s a different take on the exact same thing that we were talking about before: I want people to understand that there’s no rule that says that you have to plot longitude as a line along a horizontal axis. It could be anything. It can be color, it can be the size of a sphere, it can be anything. In binding my student’s arms a little and saying \"You are not allowed to put this on a map\", it forces them to see it in a different way and that’s by far the most successful assignment. If I don't give them that constraint, everyone gives me dots on a map and dots on a map are actually rarely interesting. I have this city bike map from New York City, I have a data set of every hotel in the world. I have a couple other big datasets, and I'm like \"Don't do a map with this\". Just that prompt forces them to do really interesting things. People will do sonifications or they will do really really big extractions. More than any other assignment I think it gets them into the frame of thinking which I think is most important with working with data which is that it’s our own mental constructs that seem to force us to do one thing with these types of data but you don't need to. You can do something else with them and by doing something else with them you can expose something that you wouldn't have seen before.\n\nLauren McCarthy\nI teach different classes, one is an introductory class and the others are more advanced. With the intro class one of my favorite assignments is for when we talk about parameters and variables. The assignment is to create a sketch where there's a change of perspective as you move your mouse across the screen. I show some traditional examples like an app that shows faces responding, or a response in music, or something basic like your mouse is here and the circle’s small and over here and it's big and maybe the background changes color. Then I say, “OK so it should change visually but it should also provide a change of perspective, so not just a change of visual form but it should change what are you expecting.” The question is how can you subvert the viewer’s expectations when they move the mouse? I often show some examples of this from other areas of art, such as ... XXX BABY WORK HERE!\n\nI also like the assignments for the Social Hacking course that Kyle McDonald and I teach. My favorite one is to create an API for an aspect of yourself or your life. Students have to pick something and make it controllable somehow by someone else. This is done either using a data feed or they open up a question to the public -- usually it's the second thing. Another one that can go anywhere is I instruct them to create an X, so whatever we’re making -- browser extensions, or apps or whatever -- they have to make it for someone else, and not just anyone else, but for one specific person. Students then must start with the person rather than the idea and I think this helps because it's a different design process. When you are just making something for yourself, it's easy to not be thinking really clearly about why you're making decisions, but if you are thinking about someone else, then you're forced to imagine the user experience a little more, and imagine their goals.\n\nThe last assignment I like is more like an exercise. Students have to write down what they are going to do that week, usually the steps they’ll take when working towards a final project. I ask them to write down exactly what tasks they are going to accomplish, and to write a time estimate for each one. Then through the week they are asked to time each one very specifically. Then we have a debrief afterwards and usually I say like: “Ok what were you going to do?” And they’re like: “well I thought I was just going to make a simple data viz connecting like only one stream of information.” And we find these buzzwords: so if you use the word “just” multiply your estimate by two, or if you say “simple”, multiply by four. It’s really common that people do not easily anticipate how long things take.\n\nTaeyoon Choi\nI ask the students to design a walk. We take a city block, assume it to be a grid, and then we program each other's walk. So you can go right across the block for 8 times, go left and if you meet another student, turn the other way, or exchange the walk and that gets them thinking about enacting. What does it mean to enact code or to execute a piece of software that's really simple, but through it you actually experience the city in a whole different way?\n\nGolan: Is the program like, “turn left at the fire hydrant” kinda thing? Or like, if you see a yellow car, turn right? I mean this kind of situation?\n\nTaeyoon: It starts out like that but we introduce the ideal variables or conditions where they meet a vendor, and it turns the whole algorithm the other way around, or they can also keep counting something, like how many yellow cabs they see, that at some point triggers a change.\n\nGolan: Like, take as many steps as you see yellow cabs or something?\n\nTaeyoon: Yeah exactly, but they design the walk. So the first is using a pac-man like grid, and then I have a very simple algorithm that keeps them looping around the one city block, but if they get out of the loop it gets quite nutty quite quickly.\n\nZach Lieberman\nThe best assignment that I have is to study and recreate work from an artist from the past. \nWhen I’m teaching algorithmic animation or audiovisual expression or just in general, a common example is I ask students to take the work of James and John Whitney as a starting point and then I give this in two ways. First is to make something inspired by their work, so to really try to come up with an original copy. To take a look at their body of work and to add a comment to it. The other way, is to focus on replication and to come up with a faithful copy. The Recode [by Matthew Epler] project does a great job at presenting both of these approaches side by side, where there are attempts to really copy alongside examples that have taken inspiration from particular artists. This assignment can then also be used as a method to talk about how people were working in the 50s, 60s, 70s and to talk about different computational approaches. I like that it allows you to talk about the past and history and not just the technology and code.\n\nRather than giving an open ended prompt, for example to create natural phenomenon using sine and cosine, this pushes students as what they are doing becomes framed with the context of art making. By taking an in depth look at the work of another artist, it pushes people for sure to produce better results and to take the work they are doing more seriously. It becomes not just a technical exploration but rather an exploration of someone who has used these things in a really poetic way.\n\nAnything that turns the classroom into a mini film festival is really great. I think it's important as a teacher to show what you're curious about, what inspires you and to be able to talk elegantly or passionately about what moves you as that helps students articulate what moves them. By showing these references and using them as a context to talk about code, it can help students translate and articulate what they care about.\n\nPhoenix Perry\nI like to get people to think about the kinds of things they can do with gaming and not just video games, but gaming more broadly. For example, maybe you want to use a sensor and you want to track someone's position. So I'll show them the games I've made, like for example where you can knock things with your head, or when you scream and something happens and so on. I try to expand the possibilities and it's really nice to get them to just blue-sky dream up crazy games. If the sky's the limit, what are some things that you would like to try and do? Around the same time, I introduce the idea of pervasive gaming and you can get them thinking about play outside of the computer. That really works well if you have a mix of artists and games people because they can synthesize their interests in a really fascinating way and make games that have nothing to do with the computer and that have very simple rules. I think that that's a really empowering experience and something I've done before outside of skillset.\n\nJohn Maeda\nI never had one. I do know that I was at my best in the beginning, and gradually got less good as I started to know what I was doing.\n"
    }
]
