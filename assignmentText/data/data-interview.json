[
    {
        "question": "Do you have any advice for first time educators teaching programming in an arts context?",
        "titles": "Interviews I",
        "answer": "*Taeyoon Choi*\nTeaching a very small group of people can be really good, like maybe less than five people and if that ever happens it is actually a really prestigious opportunity or perhaps you can try it if you have a working group and run a small workshop. I also think drawing is really helpful. I draw a lot before the class and during the class and I sometimes draw the same thing over and over again. The idea is that I'm performing a drawing and it gives the students the time to think with me about how knowledge is processed. I encourage them to make drawings in their sketchbook as well and then they end up with their own textbook in a way. An explanatory text that they processed themselves.\n\nIt’s also really helpful to understand that not all students are going to appreciate what you teach. If I get like twenty percent of the students really excited about what I do, I call it a good day. Teaching is a really difficult thing to do.\n\n*Phoenix Perry*\nMy advice would be to discourage people from working with people they know. Try and get people to work in groups of people where they might have to be exposed to new ideas or new kinds of things. The other piece of advice I would give is to be really careful when you start seeing bro culture emerge. When you start seeing the classroom segregate and the women start fetching coffee and the guys are doing the code, or even where the women are doing all the art. Be really careful of that and remain very cognizant that it can happen.\n\nFor me the biggest problem I have is not the part involving dealing with students, that's really easily done once you learn to balance the energy in the classroom. The real challenge is realizing that there is a level outside that which is how you deal with the fellow staff, how you deal with college, and how you get to keep teaching. You have to work out what an academic career actually looks like outside of the classroom because that is how you get to keep your job.\n\nFor example, if you check in and check out and teach your class and get good reviews, that's not enough to ensure you get to keep your job in academia. You need to be very visible, you need to be integrating into the community, you need to be participating in publishing papers, you also need to be making allies and friends in your department and you also need to be building relationships with the administrators so when a class opens up they know who you are. That is really important, particularly as the adjunct model becomes more and more widespread. As full time jobs become less and less sure, understanding how a professional career or research career can connect through to a teaching practice is really important as well as how to communicate that outward. I'm a good teacher and I always get good reviews because my students like me. Of course I've had a few exceptions where classrooms just didn't jive with me, but normally I am a rock solid teacher. But for any permanent roles, keeping a job is always really difficult. I always knew I was going to get to teach, but in places like NYU, it's like game of thrones. Everybody's a rockstar so what makes you stand out from all the other rockstars is your attitude with the administration and how you help the department meet whatever objectives they have on the bigger scale.\n\n*John Maeda*\nLeave academia as soon as you’ve learned all that you had hoped to learn. I did!\n\n*Jer Thorp*\nGet students making as soon as you can. For me that’s like 10 minutes into the class. We write a really simple 4 line processing sketch that does something really easy and get them there right away. Don't stop to talk about what the IDE is and what syntax looks like, and what a semicolon means. That stuff sucks. You need it but it sucks. Do the making first, then use that to go back and talk about it after.\n\n*Lauren McCarthy*\nLauren: Something that I read, that really stuck with me is that the brain is setup so that as soon as you figure out something that was confusing you, your brain immediately forgets what it feels like to be confused. Your synapses will fire in a way so that your not confused anymore. So you learn the code and it clicks. You ride a bike, and then you can't remember how to not ride a bike and for that reason, it's sometimes really hard to remember how confusing that feeling of confusion is. So my advice is something I always try to do before office hours, and that is I to try to think about something that's really confusing or I try to like imagine myself back in the lab as a student, when I used to just sit there hoping someone would do my homework for me. I really try to tap into that feeling of frustration, that confusion when things don't just click. And not just like A=7 da dah! But that feeling when each step needs to be a moment of understanding. By trying to take yourself back there as a teacher, particularly if there's a lot of students you need to help, it just helps you connect with them more.\n\nTega: That’s so interesting. Many times when teaching a class for the first time, especially if it’s something slightly out of my skill set, I’ve had unexpectedly good results and reviews. Then once I’ve taught it a few more times and I know the material really well, it's harder to empathize. After those first couple of times I often feel like I'm actually getting worse at teaching it which is really not intuitive at all. So as first time educators your inexperience can actually be a positive thing, because you are more likely to relate to students and understand what they are going through.\n \nLauren: Totally. I think the other thing is just modeling belief as this can change student’s world. I think probably everyone who has ever done something or been successful has had someone who believed in them and made that clear, and helped the student understand how to believe for themselves. I think about that a lot.\n\nThe other thing that I think is worth saying is that as a teacher you are there to motivate everyone, you're encouraging everyone, everything's great, and then sometimes it's hard. It's tiring and it doesn't always feel ok to like admit that. In other jobs somehow it feels more ok to talk about how it's hard, and I guess we do that too sometimes as teachers. But often it feels like there is a pressure to always be like: Hurrah! Everything is great!\n\nI don't know, maybe that's just a little bit of a buzzkill for your book but I think it’s good to say sometimes.\n\nGolan: Yes, you can't show weakness in the classroom. It's like you’ve got twenty students here so you can’t say, “guys, I am having a bad day”. Or perhaps it is one of those days when you're not prepared, and you just going to roll in and wing it. You haven’t got the Julia-Child-almost-finished-cake in the oven and instead you have to program in front of them, while typing in front of them, while talking in front of them, while thinking the code through in front of them, while clearly explaining what you are doing. And, then sometimes some stupid shit will happen, and just everything gets borked. In front of them. Those are the worst moments I know as a teacher. Those can be really tough days.\n\n*Daniel Shiffman*\nWell I continuously make the same mistakes over and over again and one piece of advice I have is to do a lot less than you think you can do. As a long time neurotic, I am a way over-preparer. For example, I was teaching a new class this semester that I ended up making 30 examples when there was only time to look at like two or three in class. Then in this situation in the past, one thing I have often done is to assume that because I made all this stuff, I have to get to it all. Then when there's only 10 minutes left of class, I would try rush through the rest of it. In my opinion, it’s definitely much better to not do this. Instead, slow down and leave stuff out. You can always get to it later, or you can send out an email, or not do it at all. I think doing less each class and allowing yourself a slowness is really important.\n\nObviously I've been doing all the stuff with videos and that’s part of an attempt to create an environment where there is some quality of self-paced learning. If you can do this or foster some collaborative learning where the students are working in smaller groups or individually in a kind of workshop setting, it’s a really good thing. Much better than rushing through a lecture and showing like 500 examples in 15 minutes.\n\n*Heather Dewey Hagborg*\nHmmm...  I would tell them to try to teach to what they are enthusiastic about - to what they actually care about. If the technical matters less than their enthusiasm for the subject, then they shouldn't feel like they have to get up there and lecture about code. It’s possibly to engage students in lots of different ways and most important is to share what is exciting about the practice of programming.\n\nWhen I started out as a freshman, I really didn't have any kind of interaction with technology whatsoever, in fact I was probably pretty anti-technology. Then in my freshman year I took a conceptual art class that included a lot of references to media art, the beginnings of Dada and Fluxus and that leading into installation and into some new media work and that got me excited about learning some of the tools of new media which led me into doing some work with sound and video. Then as I started working more with sound in particular, I felt very distant from the medium. Having come from a more materially engaged practice like sculpture and installation, I felt like when I was working with sound I was removed from the material. I was using a software interface but I felt distant from it so I signed up for an introductory programming class, a python class. In part, I signed up for it because of the title which was Thinking with Objects, and I liked that because I thought it sounded very physical and visual. Of course I didn't know it just meant object oriented code but luckily the professor was really fascinating. A brilliant brilliant man who even in that intro class, starting tying the code into ideas about neural networking and genetic algorithms.\n\nEven though we were total beginners and we couldn't quite understand what he was saying, he provided these very visual explanations of neural networks and of organisms and I found that really exciting.  Again, I probably would have never continued with it except that he specifically came to me and said \"you should consider taking the Artificial Intelligence class\".  If he hadn't gone out of his way to invite me to take this class, I would have thought I wasn't good enough to do it, but because he did I became curious about it, and then took it and really loved it. That is what launched me into this whole algorithmic direction.\n\n*Zach Lieberman*\nI always say every time I give out a homework assignment that every homework assignment is an opportunity for genius. The most important advice is to have that sort of optimism, having that sort of energy for your students with every prompt and every time you ask them to do something or engage in something. Learning code can be frustrating and it requires a lot of time and a lot of failure. Time and failure and misunderstanding. To imbue a sense of optimism here is so important. To celebrate this as a new mode of working and to help students to realize that there's all these untapped ideas out there."
    },
    {
        "question": "What’s your favorite computational art assignment to give to students?\n",
        "titles": "Interviews II",
        "answer": "*Daniel Shiffman*\nLet me preface by saying that sometimes I feel like assignments are my weakness. One of the tricky things I try to balance is having a feeling of open-endedness, with having constraints, so that students can feel creative and make their own thing, but the assignment is not impossible.\n\nI have two assignments to share, one is from the Nature of Code course materials and it’s for more of an advanced scenario, for somebody who's already taken a full semester of programming and who's now launching into learning about motion, simulation, nature and physics. The assignment is to build your own ecosystem. It's really not a single assignment but a thing that you might do over a long period of time. The first thing they learn to do is to make this one little thing move around the screen, and then later they might figure out how to make 10 of those move around the screen. And then later they might figure out how to make those 10 things see an obstacle in the environment and then also see each other and bounce and interact with each other. So there's kind of this idea of building this whole ecosystem out of these little miniature parts. I really enjoy seeing what kind of strange world people will create, that either mirror things in our real world or are fantastical inventions.\n\nThe other thing I really love doing in an intro class is anything that fosters collaboration. It's really hard to do and is a much easier thing to pull off in a physical computing class, although I don’t actually teach that. But what I’ve observed is that when you're building something physical, seeing where the collaboration comes in is more obvious. When learning programming, students tend to think they have to work solo on code projects, when actually, large pieces of software are built by teams of people. So one of the assignments I really like is to randomly partner students and have them exchange bits of code and you get these kind of Frankenstein monsters, like, “I made the sun rise,” and “I made a fish swimming, and now I have a fish swimming through a sunrise.” That kind of thing.\n\nGolan: It reminds me of an assignment that John Maeda gave a long time ago, which was to take someone else's assignment from last week and improve it or modify it.\n\nDan: Right. And where this can also work well with is when teaching object-oriented programming. I really like to say, “make your class and then give it to somebody else to make objects from inside of their world.” What I love about that is not just this idea of collaboration and talking to somebody, but that it also teaches about open source development and library making. Students can’t just give somebody else their code, but they also have to explain what all the functions do and invent their own documentation, whether that's just explaining it in an email or with good code comments.\n\nObviously if you were teaching a more advanced class, you might have the class use GitHub or whatever, and create a documentation page. I like trying to keep that spirit of collaboration, learning how to exchange code and also learning about object-oriented programming. All of that works well together. I think I like that assignment better than the first one.\n\n*Jer Thorp*\nI wish I had a really clever answer for this, but the thing that works the best on the first day of teaching creative coding is the “drawing tool” assignment. There’s something really rewarding about making a drawing tool because you can quickly get at what makes computational assistance powerful and students also get something that they can share very quickly. One of my big strategies for teaching designers and artists how to code is to get them making as soon as possible and associated with that is sharing as soon as possible. I want them to have something that they can post on their Facebook or Twitter feed at the end of 3 hours and because they are proud of it, they get that little buzz. People are like \"This is great!  How did you make it?\" and they get to say \"I'm doing this\". I think that where teaching programming goes wrong and it often goes wrong, is that this moment comes in week 5 or something. At that point if you’ve survived 3 or 4 weeks of not making things, you’ve already self-selected a group of people that maybe we don’t need to be self-selecting.\n\nSo for me, within an hour of the first class we have a really simple drawing tool going. The one where it draws a line from the middle of the screen to the mouse position and they can draw little spirals with that. Then I do another one right after that where it draws grass as you draw with the mouse and given that, I say create your own drawing tool. One of the other reasons I think that it works so well at the beginning is that it gets people into this idea of the modularity of programming.  I say to them \"let’s look at the command to draw a line and the command to draw a rectangle.\" Even though one draws a line and then one draws a rectangle, they both take four numbers and so they're actually interchangeable. I can just drop the arguments for one into the other. In the beginning of my first 2 - 3 classes, the big focus is to get people to repeatedly ask, “every time you see a number, what would happen if I put another number in there?”  And every time you see a method to think \"What would happen if I put another method in there?\"  Because that’s where this stuff becomes exciting. Through the grass drawing program we learn a little bit about random and then we can go back to the old example and put in random for the line width or they put random in for the other positions. I want to get them into that lego method of programming as soon as possible and to see programs not as things that are crazy glued together but as things that can be taken apart and reassembled.\n\nGolan: Now let’s tweak the question. What are some of your favorite prompts, specifically in the field of information visualization, and maybe prompts that are not necessarily for beginners, but prompts that can be approached by anyone at a lot of different levels, including advanced or intermediate students?\n\nJer: In an information visualization context, the one that works the best is to take location-based data and ask students to do something with it that is not allowed to be on a map. I could build a whole course around this assignment. In my data class students take a big data set of something that is primarily latitude and longitude. But I don't let them plot that on a map so they have to take those things and plot them in some other way and that’s really nice because it kind of frees you from constraint. It’s a different take on the exact same thing that we were talking about before: I want people to understand that there’s no rule that says that you have to plot longitude as a line along a horizontal axis. It could be anything. It can be color, it can be the size of a sphere, it can be anything. In binding my student’s arms a little and saying \"You are not allowed to put this on a map\", it forces them to see it in a different way and that’s by far the most successful assignment. If I don't give them that constraint, everyone gives me dots on a map and dots on a map are actually rarely interesting. I have this city bike map from New York City, I have a data set of every hotel in the world. I have a couple other big datasets, and I'm like \"Don't do a map with this\". Just that prompt forces them to do really interesting things. People will do sonifications or they will do really really big extractions. More than any other assignment I think it gets them into the frame of thinking which I think is most important with working with data which is that it’s our own mental constructs that seem to force us to do one thing with these types of data but you don't need to. You can do something else with them and by doing something else with them you can expose something that you wouldn't have seen before.\n\n*Lauren McCarthy*\nI teach different classes, one is an introductory class and the others are more advanced. With the intro class one of my favorite assignments is for when we talk about parameters and variables. The assignment is to create a sketch where there's a change of perspective as you move your mouse across the screen. I show some traditional examples like an app by Blablabla that shows faces responding to music, or something basic like your mouse is here and the circle’s small and over here and it's big and maybe the background changes color. Then I say, “OK so it should change visually but it should also provide a change of perspective, so not just a change of visual form but it should change what are you expecting.” The question is how can you subvert the viewer’s expectations when they move the mouse? I often show some examples of this from other areas of art, such a performance work by Anya Liftig and Caitlin Berrigan called Adoring Appetite. In this piece, the two artists pushed strollers around NYC, snuggling and kissing their babies. At some point, the kissing turns to biting and eating, and they chew through the babies heads which turn out to be made of sugar and filled with red jelly. I ask my students, what would it look like to create an experience this affecting with code?\n\nI also like the assignments for the Social Hacking course that Kyle McDonald and I teach. My favorite one is to create an API for an aspect of yourself or your life. Students have to pick something and make it controllable somehow by someone else. This is done either using a data feed or they open up a question to the public -- usually it's the second thing. Another one that can go anywhere is I instruct them to create an X, so whatever we’re making -- browser extensions, or apps or whatever -- they have to make it for someone else, and not just anyone else, but for one specific person. Students then must start with the person rather than the idea and I think this helps because it's a different design process. When you are just making something for yourself, it's easy to not be thinking really clearly about why you're making decisions, but if you are thinking about someone else, then you're forced to imagine the user experience a little more, and imagine their goals.\n\nThe last assignment I like is more like an exercise. Students have to write down what they are going to do that week, usually the steps they’ll take when working towards a final project. I ask them to write down exactly what tasks they are going to accomplish, and to write a time estimate for each one. Then through the week they are asked to time each one very specifically. Then we have a debrief afterwards and usually I say like: “Ok what were you going to do?” And they’re like: “well I thought I was just going to make a simple data viz connecting like only one stream of information.” And we find these buzzwords: so if you use the word “just” multiply your estimate by two, or if you say “simple”, multiply by four. It’s really common that people do not easily anticipate how long things take.\n\n*Taeyoon Choi*\nI ask the students to design a walk. We take a city block, assume it to be a grid, and then we program each other's walk. So you can go right across the block for 8 times, go left and if you meet another student, turn the other way, or exchange the walk and that gets them thinking about enacting. What does it mean to enact code or to execute a piece of software that's really simple, but through it you actually experience the city in a whole different way?\n\nGolan: Is the program like, “turn left at the fire hydrant” kinda thing? Or like, if you see a yellow car, turn right? I mean this kind of situation?\n\nTaeyoon: It starts out like that but we introduce the ideal variables or conditions where they meet a vendor, and it turns the whole algorithm the other way around, or they can also keep counting something, like how many yellow cabs they see, that at some point triggers a change.\n\nGolan: Like, take as many steps as you see yellow cabs or something?\n\nTaeyoon: Yeah exactly, but they design the walk. So the first is using a pac-man like grid, and then I have a very simple algorithm that keeps them looping around the one city block, but if they get out of the loop it gets quite nutty quite quickly.\n\n*Zach Lieberman*\nThe best assignment that I have is to study and recreate work from an artist from the past. \nWhen I’m teaching algorithmic animation or audiovisual expression or just in general, a common example is I ask students to take the work of James and John Whitney as a starting point and then I give this in two ways. First is to make something inspired by their work, so to really try to come up with an original copy. To take a look at their body of work and to add a comment to it. The other way, is to focus on replication and to come up with a faithful copy. The Recode [by Matthew Epler] project does a great job at presenting both of these approaches side by side, where there are attempts to really copy alongside examples that have taken inspiration from particular artists. This assignment can then also be used as a method to talk about how people were working in the 50s, 60s, 70s and to talk about different computational approaches. I like that it allows you to talk about the past and history and not just the technology and code.\n\nRather than giving an open ended prompt, for example to create natural phenomenon using sine and cosine, this pushes students as what they are doing becomes framed with the context of art making. By taking an in depth look at the work of another artist, it pushes people for sure to produce better results and to take the work they are doing more seriously. It becomes not just a technical exploration but rather an exploration of someone who has used these things in a really poetic way.\n\nAnything that turns the classroom into a mini film festival is really great. I think it's important as a teacher to show what you're curious about, what inspires you and to be able to talk elegantly or passionately about what moves you as that helps students articulate what moves them. By showing these references and using them as a context to talk about code, it can help students translate and articulate what they care about.\n\n*Phoenix Perry*\nI like to get people to think about the kinds of things they can do with gaming and not just video games, but gaming more broadly. For example, maybe you want to use a sensor and you want to track someone's position. So I'll show them the games I've made, like for example where you can knock things with your head, or when you scream and something happens and so on. I try to expand the possibilities and it's really nice to get them to just blue-sky dream up crazy games. If the sky's the limit, what are some things that you would like to try and do? Around the same time, I introduce the idea of pervasive gaming and you can get them thinking about play outside of the computer. That really works well if you have a mix of artists and games people because they can synthesize their interests in a really fascinating way and make games that have nothing to do with the computer and that have very simple rules. I think that that's a really empowering experience and something I've done before outside of skillset.\n\n*John Maeda*\nI never had one. I do know that I was at my best in the beginning, and gradually got less good as I started to know what I was doing.\n\n*Heather Dewey Hagborg*\nIn my bioart class, the first assignment that we did we were looking at the future of synthetic biology, genetic engineering and design futuring, speculative design as practiced, and so the assignment for that is to design a product or service that anticipates where they imagine either genetic engineering or synthetic biology going in lets say the next 100 years basically.  So then they come up with both a sketch of the product or service and then also a 1 page written discussion of what that future is theyve envisioned and how that product has an impact on society. Speaker 1: That's a critical project which they dont actually have to build in a working form, they don't have to realize it.  It can actually remain\nentirely within the speculative dimension and also the critical dimension.\nSpeaker 2:  It can exactly.  I will say that in that module we do, perform genetic engineering experiments so that you have some hands on engagement\nwith that process so you understand some of the limits of whats possible but it also encourages them to sort of think beyond what they are capable\nof actually doing.  It would be, in the frame of an actual semester its just unless they took a whole semester off for a special project, its just not\nenough time for them to really do anything significant with something like genetic engineering.  They have the hands on experience to keep going\nthrough a lab basically where they learn what that process looks like, and them I'm asking them to think about where thats going and what that future might be."
    },
    {
        "question": "What is different about teaching artists to code as opposed to teaching programming in a computer science context?",
        "titles": "Interviews III",
        "answer": "*Daniel Shiffman*\nUltimately people are people, so you can teach classes any number of ways to different groups. However, I think that the idea of kind of sketching with code is realy important as it implies a lightness in trying things out and not.\n\nI’ve had this discussion with Lauren McCarthy who has such a formal computer science background. She was telling me about how hard it was for her to get used to teaching in a creative context like ITP because in computer science, there is this feeling of having to know everything, how everything works and of being able to reproduce everything from scratch in a memorized and almost like blue book test kind of way. In contrast, teaching in a creative environment or in an arts environment is about being able to embrace uncertainty. Where students don't necessarily know everything but they should try it anyway, where mistakes might actually lead to exciting ideas and where there doesn’t have to have to be a thing that is solved with an exact answer. In a way, it’s almost like stream of consciousness coding. I don’t want to portray the computer science class in a negative way, but it is based on learning something quite exactly.\n\nTo be honest, it's hard for the students - every semester I have a student say, “Okay, I really feel like I'm not getting this because the thing you showed in class, I can't sit down by myself from a blank sketch and like, write it again.” But nobody can do that, really! Everybody who's programming something is programming it because they did something similar before. Or it's built on top of a library and they started with the example and that's a totally valid way to learn.\n\nAlso learning how to ask for help, like that's a thing you have to teach too and it’s a huge part of the learning process. You can't just teach the programming but you’ve also got to teach how to get help, like; “How do you ask? What's the right question to ask? When do you write, ask the question, how do you, how do you debug?” All of that type of stuff, and it can easily be lost in the, 'here's the lesson' type approach.\n\n*Phoenix Perry*\nPhoenix: I think you need to assume no skill. I think it is really important to go slow from the basics and make sure that students have the basics right. I think that you also need to review fundamental mathematics in a way that is connected to a visual output. A lot of my students get taught math without it having any meaning, they get taught sine and cosine but they never got taught that in terms of animation and oscillation.\n\nGolan: I have the same thing at CMU where I have sophomores in the school of art who often don't really know Pythagoras's theorem. And I’m like “here's a triangle, let's talk about that.” And when they struggle with it I have to chide them and say “guys, this is ancient greek technology. This is 2015 you should know this stuff.”\n\nPhoenix: For sure but it's mathematics, and it’s strangely segmented from the arts. If you identify as a creative person, it's often really hard to see yourself as a mathematician or as a scientist, or that you would even have a confidence to be good at those things, right? So I think you have to really reintroduce subjects in a language the artists understand which is visual and sound. And if you can do that, they’ll often get it all of a sudden.\n\n*John Maeda*\nArtists tend to look down upon math as something that gave them prior difficulty or hurt them in the past. But there are a few artists, I have seen over the last few decades, that overcome this stigma to create software as fluidly as a computer scientist. Also, it’s important to remember that some artists come from a purely mathematical/coding background — it’s sort of incorrect to assume that all artists don’t start with the ability to code. Especially now.\n\n*Lauren McCarthy*\nAmongst CS people, I think there is this feeling that the code itself is the art and that there's all if these ideas and techniques you have to understand, like managing complexity and modularity, before you can really make things. That was really hard for me when I started teaching, I’d think, “Oh we're just showing them how to make shapes on the screen, they don't understand what programming is about.” But actually that is totally wrong because programming can be about a lot of different things. Usually when teaching artists, some of them will immediately fall in love with the logic of it but for a lot of them, that's not why they’re excited, typically they have other goals. If they progress far enough into it, some might start to feel curious about kind of the higher order stuff of programming, or they may not - I know I certainly did. I wasn't interested at all until I realized I could make art with it so I think (teaching programming to artists) is a lot about expanding purist ideas of what programming might be, or letting go of your snobby attitude. It’s important to realize that it's not like you’re dumbing it down or simplifying it, rather you're actually just approaching it from a different angle. By hearing how they approach it will likely make you understand programming in a different way.\n\n*Heather Dewey Hagborg*\nI think it’s important to teach everyone to code.  I think it’s a fundamental literacy that we need to be advocating for across the board.\n\nFor artists in particular is has to be project based. I think that the only way you really get artists motivated is by having them work on their own thing, something that they are actually excited about doing it. In my experience, giving a bunch of assignments that they don't care about is kind of useless. Instead if they are trying to synthesize things that they have maybe read about, or maybe seen a video about, but then they are actually forced to synthesize it into something that they actually want to make, then they will learn it. I think that’s maybe more important than what the project looks like, or what language it is written in, or whether they make something visual with it or not.\n\n\nAt the end of the day, people will want to work on all different kinds of things and I really do think that once they learn one language well, they can just pick up any other one. So really, the aim is to make programming a tool for them to use of their own volition and with their own agency, to make what they really want to make.\n\n*Zach Lieberman*\nI think one of the biggest challenges of working with code is that your mode of working tends to be pretty solitary - you're in front of a computer screen. It tends to be a time consuming and solitary experience and that can be frustrating especially if you're used to practices that are more physical, or group based or based on discussion. Instead of talking to people you are talking with a compiler. You’re in a conversation mediated through a computer screen and I notice people who get frustrated with that. These things make this mode of working very hard."
    },
    {
        "question": "How do you ensure content, criticality or heart in the midst of technoformalist education?",
        "titles": "Interviews IV",
        "answer": "*Taeyoon Choi*\nThat's a really good question because it's easy to sort of retreat to this mode of like, “we are going to help you become a coder, we are going to help you become an expert.” To me that sounds as thin as, “we are going help you become good at Photoshop.” I think the real question is about finding a desire within students to master the language - the language of the technology. It's code and electronics and all of that, but it's really about literacy. I want them to approach code and technology as an artistic medium, so they can be creative with the medium and take down the psychological barrier of “I can't do this” or “this is not for me.” I like to give exercises that are as simple as possible. For example, one button, one output, like pressing a button that lights up LED, and putting delays in between. I like to show that you can do a lot with very little technology.\n\n*Daniel Shiffman*\nI don't know if this works, but one approach that I have is that during the semester, I tell them don't worry about making an opus, you don’t have to make a really important, meaningful thing -  just kind of play. Let your work wander and in that sense, have a kind of free spirit while you're doing your assignments.\n\nIt's okay to focus on, “I just want to try this thing with a for-loop, because that's what we're learning and I don't want to get lost in my own head about having to solve this climate change crisis, I just want to play around here with a for-loop.”\n\nSo it’s ok to free yourself of the ideas at some point, and then, and this often happens at the end of the semester, flip it and free yourself of the formalism steps. I always say to students “you don't have to use code for your final project” but nobody ever really takes me up on this. I say, “if you have a project that came out of the ideas we're talking about and you're excited enough to make, like go for it and explain why.”\n\nI'm sure, that the process of a student explaining why they’re not using code would show there's probably a good reason, but no one really does that. The other thing is students get really lost in is, “but I think it's so simple, I feel like it needs more.” But you know, it isn't bad if it's simple, that can be good. Worry about your idea or what you're trying to communicate at that point and forget about the formalism.\n\nWhether that works or not, that's my kind of approach, it's like trying to be at the either extreme in some sense.\n\n*Phoenix Perry*\nThat's a really hard question and one I think about that a lot. I try and give my students artists to look at who I think are doing meaningful work. I try and seed them with essays or things to read that include those kinds of ideas. I try and get them to look at the material, like if we were sewing we would be trying to understand cloth, so I try and get them to think about the way code works in culture and the way they're learning how to kind of use this material in a context.\n\n*Jer Thorp*\nI've been lucky to mostly teach in environments where people want to find meaning in the work and that's one thing that shocked me in my first semester at ITP. I throw a lot of theory and a lot of reading and a lot of weird stuff at the students. Often I assign a novel that they have to read during the class.\n\nIn the past I’ve assigned Gary Shteyngart's \"Super Sad True Love Story\" and normally, the response is overwhelmingly \"oh god that was great!  give me more of that\".  Mostly nobody says, \"Please teach me more technical things.\"  The response is almost always \"lets get into the weird stuff more.\" I would encourage people to think about ways to do that, even in a basic programming class. Give small readings. There’s some great Pynchon passages which are so good for this type of thing. Ask them to make something in response to that, to remind them that it’s not all about the computer.\n\n*Lauren McCarthy*\nI like to show a lot of references that have nothing to do with code, especially when I'm giving assignments. I ask students “what would this be like if we were doing it with the tools that we're using? How would this idea manifest?” Or I have them think a little bit outside of the box with the boxes, and ellipses. I put a really big emphasis on context, especially as it gets closer to the final project. For example, they are required to come up with several examples of influences or other things that inspired their work beyond the “I learned how to make a four loop or I went to office hours” type response. This is often really hard for some people at first and when I ask their inspiration, their response is literally “office hours with the residents.” So I always say - “keep looking!”\n\nThe web is also a really nice context actually. We taught our intro class with the web this semester and it was cool because people are already so familiar with that space. They know that context from everything from websites, to news, to ads, to videos, to art pieces. Whereas, when we are using Processing, we are a little bit more constrained because you have the window with some stuff in it. So for me, that was really helpful already. Then I also try to bring in news and current affairs, like “hey, this lawsuit is happening, or this new regulation got approved. What does that mean for us?” Trying to make them realize how they are a part of things.\n\n*Heather Dewey Hagborg*\nHeather: This is something I have really struggled with in a programming class but I feel like I really nailed it this semester in my intro to bioart class. I think it’s really relevant, because the bioart class is a very similar challenge in that I'm trying to teach technical skills but I'm also trying to teach something that students don’t really know anything about, and trying to bring in critical and ethical questions along with that. The way that I structured the bioart class is around four projects, 3 topical projects which each involved several sets of skills, and then one final project. And I want to import this to a programming class as well. Each project is a module, and then each module had a set of critical readings to frame the conversation for which the students had to write a page. Before we came into class they would discuss the readings and I had them all submit a very short essay the day before just to make sure they actually read it and thought about it to the slightest degree basically.\n\nThen in class I went through their writing and pulled out one thing from each student’s writing and tried to bring that into the conversation. So before we actually started working hands on with the materials and the methods of the technology, I tried to frame it with those critical questions in mind.\n\nThen when they started on their final projects, I also tried to bring those questions from the readings they critiqued, back into the discussion of the project. It was very natural this time because the students had already been thinking about these issues a lot and so as they started proposing projects or sharing their work, the questions naturally came into the critique from all directions and not just from me. I feel like I‘ve grappled with this question for a long time when teaching programming and even during the last semester with the bioart class. This was the first time I think I've ever come kind of close to getting it right.\n\nGolan: It seems like your answer is preparatory readings that provide a critical starting point.\n\nHeather:  Also treating these as equal to the other skills being learnt in the class. Making sure that students are being held accountable for doing the readings and that we really set aside the time in class to give it the proper discussion so that it doesn’t just feel like its bonus material or as optional.\n\n*Zach Lieberman*\nI try to bring in as many outside examples of things that I think are important, even if they are things that are not necessarily made with code, but artworks or visual ideas or projects that inspire me. I think you get heart by showing heart - show stuff that is important and has heart to it. A lot of teaching is about articulating values, it is the public articulation of values in a classroom, and that helps students understand your value system. Maybe they have their own value systems or interests but seeing your curiosity, and what you think has heart, helps them bring that into their work."
    },
    {
        "question": "Tell us about one of the most memorable responses you received from a student?",
        "titles": "Interviews V",
        "answer": "*Taeyoon Choi*\nThe most heartwarming response I’ve had was when Andy Klimer from the first SFPC class saw me two years after he finished the program said, “I'm still working on your homework.” He’s a fantastic type designer who does generative fonts and I got him excited about electronics. He got really into synthesizers and robotics from some of the workshops that I did. It’s funny because the workshop itself was not that successful - it was really one of my first classes teaching technical things and I don’t think I was really ready to be the teacher. Still we try to adopt a collaborative approach where the students take the lead at the end of the course and tell us what they learned and hearing that he continued from where we started probably made this one of my best teaching experiences. \n\n*Phoenix Perry*\nDon't be afraid to be a bitch. Don't be afraid to like tear somebody down. Some of the most rewarding projects I have had have been from students who I have given very negative feedback early on about a bad idea and they've taken my feedback as kind of fuel for the fire and they've either proven me totally wrong, or they have improved their concept significantly by the time I see it again. For example, I had one student who wanted to make an oculus rift game and he told me his original idea, and I was like “this is total shit, I don't like it at all, it's not interesting, it's not new, I don't want you to just make a space shooter. Why use the oculus rift to make a space shooter? What are you bringing to this?” So what he decided to do was make a rhythm-based space shooter and he used the diegesis of the cockpit to be the control system for the game. You had to look to the rhythm of the beat, and the beat got stratified. So if it was the Tom beat one kind of object would shoot out you would kind of have to go look at that location, and that would be one color. It was like a base beat you would have to look over at the right location. And it would destroy kind of the object that was the base beat. It was really fun because then the act of turning your head, looking up and down and around became really satisfying because you were doing it on rhythm and at a pulse. \n\nAnother student project that really broke my brain and I've never actually seen anyone do anything like this before was by a kid named James Cameron. He wanted to make a horror game that connected through to the real world. He made this horror video game, and it's a really terrible setting, ike a murder has occurred, and you're riffing through and then you go over, and all of a sudden you see a phone on the console, and when you touch the phone your actual cell phone rings. Then the characters start calling you and leaving you messages during the day and they’re prompting you to kind of play this story. That was really amazing and his original idea was not spectacular. I was really hard on this kid in his exams, like he missed a semicolon on something and I drew a pirate and said now walk the plank. I think sometimes teachers want to make students feel really good and sometimes that's not the goal. Sometimes you want to make them question if something is worth their time and how they can bring something new to it. \n\n*Lauren McCarthy*\nFor me, the things that are the most memorable are usually less about the output and more about the process. Like seeing that student who is really struggling in the first few weeks, and then every week, rather than just doing the assignment she does five versions of the assignment. Then by the end she's a great programmer with a really strong concept in her final project. That’s the sort of thing that really sticks with me. \n\nIn terms of specific responses, one of my students did a project when she was just learning to code where she would go up and ask people for their Processing sketches, like the code itself. She would then try to draw by hand what the outcome would be and after would run the sketch to see how close she could get. \n\nLet's see, another one which is not such a crazy concept itself, but I really liked where the two students were coming from. The project was called: Not lost in translation and they basically made a chat app for themselves. They both spoke english but with a strong accent. and they felt like people didn't understand them a lot. They first just wanted to make something that would kind of like translate into the opposite language but then when they hit some technical barriers, they changed their concept so that you would speak, and you could choose English or Indian. or Korean, or whatever language you are speaking. And then it would do like a google translate of that and then a google image search. And then it would just show the other person a pictogram of what they had said. And then the person would respond by speaking and it would show a pictogram. So it's totally nonsense but it was nicely executed. Then the last one is Ben Caughman's response to the API project, where you have to make some aspect of your life controllable. It was super simple. If you messaged him with the hashtag brain stamp he would pull a postcard out of his pocket, mark down whatever he was thinking at that moment and drop it in the next mailbox that he saw.\n\n*Zach Lieberman*\nMy department head that asked me to teach class on artistic data visualization and I’m a fan of artistic data work but I’m not a fan of data visualization and so I was conflicted whole time I was teaching it and I really brought that energy to classroom. But in that class there were folks like Evan Roth and Chris Sugrue that they took these prompts and really created art works out of them. Things like Evan Roth’s, NWA Explicit Content Only. They took the prompts that I was giving them and created things that would stand in a gallery or would be written about in a blog. For me it's really existing as a teacher when your students create work which is noteworthy, work that gets people writing or talking about it because you start to see that feedback loop which is great. As a practitioner there is a feedback loop of making something, reaching an audience and getting feedback from it, and that cycle helps you understand the value of what you do. It’s really hard to understand the value of what you do. For me the most exciting prompts are they ones that result in work that makes it out there in the world."
    },
    {
        "question": "What do you do on the first day of class?\n",
        "titles": "Interviews VI",
        "answer": "*Zach Lieberman*\nOn the first day of SFPC we start with questions and it is really fascinating. We come in and explain a little bit about what we do and I ask students to take 20-30 minutes by themselves and write down every single question that they have and this creates a really interesting and really strange moment. I want to know whatever brought them into the classroom and what questions they had in mind. They sit write, meditate and then we collate them. These questions become signposts or markers for what we talk about. So someone will say “I want to learn about X, Y, Z.”  And someone else will put a note up saying “come talk to me.” Some questions are unanswerable, like really deep and profound questions and I love some that some students will try and cross questions off the list as the class progresses. I think it's important grounding. A lot of times you come into the classroom and the professor gives you a syllabus and it’s like here's where you're going to go. Here's the journey we are going to take. We're going to cover these things to get to that point. So it's nice to start on the first day and say - “what we are going to do here is really driven by questions, driven by a collective exploration of questioning.” I think it's generally good to get students in the right mindset. As a teacher, I want to have students that ask a million questions and so you want to create an environment built on more questions than less.\n\n*Daniel Shiffman*\nI always feel very anxious all morning before class - that's what I do on the first day! I always wonder, “what am I going do for two and a half hours? I mean that's so much time!” And then I over prepare and inevitably only get to only get to like a tenth of what I meant to.\n\nIt's different in different contexts, but one of the things that I do if possible, is to not look at any code until the last five minutes, if at all. In the past I’ve done a conditional drawing exercise, where the students pair up and one writes instructions that the other has to draw.\n\nAnother thing that I also do is try to have a discussion about historical context, programming languages and what it means to program. Like why should you program? If I'm in a class of true beginners, I like to talk about what programming languages the students have heard of and what they think people do with them. I ground everybody in a larger landscape, which is a nice thing to do.\n\nWhat I also find is useful is to show work people have made in previous years and to really focus on projects that do something that's about social good, or projects that just have this totally nonsensical, playful quality with no practical value whatsoever. It's easy to imagine certain kind of interactive exhibits or certain kinds of games, so I try to showcase projects that are a bit different.\n\nOne thing that I definitely used to not do, but that I have been much more conscious about recently is making sure that when I'm showing the projects, that I have a diverse set of people who've made them as well - from different communities, different genders and that type of thing.\n\n*Lauren McCarthy*\nI like tell a lot of jokes that nobody gets as if I keep it up by week 7, by then I’ll at least get a pity laugh. In the introductory class we do a lot of borrowed things like conditional design drawing exercises which is something Casey Reas does. If I'm teaching Javascript, we pull up an example online and I show them how to open the console and start messing with the Javascript or CSS that's running to get to the idea that it is all hackable, and that that is what we are learning to do.\n\nI also try to ask like who's feeling nervous or scared or unhappy or thinks they’re going to be bad at this class. I think a lot of times everyone comes in thinking that they’re the worst student in the class or that they’re the only one who is not going to get it, and sometimes I think that it is reassuring to see that everyone is terrified.\n\nOn the very first day of the social hacking class, we have students sign a contract that says a few things. Firstly, that we are asking them to experiment but that they acknowledge that the experiments are theirs so we're not liable for their decisions. Also that they take into consideration that they are doing work that involves other people and that just because these may be art projects, that doesn't give license to not respect a person. Also that they acknowledge that we are asking them to take risks and they must be willing to do that or otherwise the should drop the class. Then lastly, that as everyone is taking risks, we need to respect that and not shut anyone down for doing so and rather we each need to respond to this. In this class everyone puts themselves out there and so we all need to put ourselves out there by giving feedback about how other people’s work makes us feel.\n\n*Heather Dewey Hagborg*\nWe talk about conceptual art and code as an instruction based medium. Then I have one student stand at the board with a marker, and then the other students instruct them on how to draw something. I think the student who is drawing doesn't get told what she is supposed to draw, but the rest of the class collectively decides on something. Then we go around the classroom and the students each give an instruction to the person. It’s fun and it helps them think about how specific or not specific their instructions are.\n\n*Jer Thorp*\nI think what I do which is different than most people I've seen teach, but I think most of us haven't seen each other teach so we don't really know. I'm really aggressive on that first day and we do a lot of things. At that point, everyone’s brains are so pliable because it’s all foreign so we might as well talk about what a class is on that first day because they are already learning new things. I get very far with them compared to what most teachers do and I'm not in anyway suggesting that they understand that stuff, but for me having taught for 10 years, I've found that the longer I waited to get to the trickier stuff, the harder time they have with it. Things started to calcify in their brains, and that flexibility they had in the first day disappears day to day to day because they are building these constructs. If I wait until class 4 to talk about what a class might look like or what an object is, by that time they are like \"wait wait wait, not this doesn't mesh with the construct that I've built in my brain around this.\"  So if you put it in the first day, you don't have to teach it really heavily and they are like \"Oh. Okay, thats how this works\". I think it’s a little counter intuitive but for me, I really have found that the longer I wait to teach that stuff, the worse it went.\n\nWhat about the first day of an intermediate studio and information visualization?  What does that look for you?\n\nMy information visualization class is half theory and half practice and there we take a pretty different tact.\n\nOn the first day of my information visualization classes in the first half, I write the word \"data\" up on the board and we talk about what that word means, which is actually an incredible little rabbit hole. Everyone thinks they knows what it means, but nobody actually knows what it means. Then we really talk about \"Where does data come from?  What does that process mean? What is it? How does it manifest?  What do we do with it?\"  What I'm trying to do is I'm trying to get them to define what I think of as the data pipeline. Data is the result of measurement and we then parse that data using computers in some way and then there’s a representation step. I want them to make that map for me. To start identifying some places where there are interesting places to intervene. For me, a data class is not about that representation piece, it’s about the other pieces because I think those other pieces are more interesting than the representation piece.\n\nThen in the second half of the class I try to get the students to create a data set on the fly and think about that implies. A simple one we do is I ask students to tell what they think their level of programming skill is between 0 - 10. Then we take those 16 answers and do a very simple plot of them and then we come back and say \"What would have happened if I would have asked this question differently? What would have happened if I would have given you a more clear way to bound that? What would have happened if I would have allowed you to share, if the first person read their answer aloud, and then the second person had to base their answer on that person?\" This gives the idea that these numbers already carry a fantastic amount of bias. Even in a really simple exercise like that, you can't really do it the \"right way\". There's no right way to do it. We can talk all we want about how to represent that data, but actually there’s a million things that have happened in producing it that have as much of an effect, if not more of an effect on what end reader will see.\n\n*John Maeda*\nI haven’t taught a class in maybe ten years now. I recall that the first thing I felt important to do was to enable everyone to get to know each other as much as possible.\n\n*Taeyoon Choi*\nI usually prepare a pretty long lecture. This gets the students who are into it excited, and also shows what the class is about to the ones who are not into it so that they can see my lecture and leave. I think this is a really good thing.\n\nAlso when I write the course description, it's usually like four months before the course actually starts and my idea of the class was completely different from the moment that I'm actually doing it. This then becomes a chance for me to realign what I want to do and what students think the class is. I rarely teach technical courses now but when I do, it's usually contextualized, so it has some conceptual arc. I explain what I can teach and what they need to learn on their own. I try to make it clear that learning technique is really hard, and it's really dependent on where you're coming from. I don't try to give them the expectation that they'll be good at technical stuff by the end of the course.\n"
    },
    {
        "question": "As programming skills gain wider public adoption, it has become increasingly common to have classes in which experienced and inexperienced programmers are mixed together. This can be particularly vexing in introductory programming contexts, in which the absolute beginners feel lost, while students who are already familiar with the material are bored. How do you deal with this situation, the “bimodal classroom”?",
        "titles": "Interviews VII",
        "answer": "*Taeyoon Choi*\nI don't have a good solution, but for me, the best practice is to give two different versions of the same assignment, especially for my electronics classes, where there's often different ways of doing the same thing. I like to give challenges to the experienced people who have done it once, and for the beginners, give them enough time. I want to avoid having one person done like in ten minutes when there is another person taking one hour to do it. A more hands-on approach at SFPC [the School for Poetic Computation] has been encouraging the advanced students to mentor the beginner students, not in a hierarchical way but to have them solve the problem together. That has some mixed success - it works for some assignments and not for the others. \n\nSomething that I learned from other teachers at SFPC is also to encourage the more advanced students to build teaching materials. They may be able to fix the problem quickly, but for them to come up with new assignments from that code or new assignments for another tool set is a more conceptual challenge. It’s also important to understand that even the most advanced technical students are probably not experienced teachers or artists and are probably not confident explaining or helping other people, so there's a lot for them to learn from that practice. \n\n*Dan Shiffman*\nI get asked this all the time and I don't know if I do this successfully or not, but I'll tell you what I think works. I try to have an approach of either looking at a particular example in incredible detail for a beginner - so line by line, making sure every little piece is sort of talked about and understood, and building up this example. In theory I might do that for half the time and then the other half of the time I look at an example from a higher level, talking about the concepts and demoing it in a way that we can have a more free-formed conversation where it's okay if the students don't suddenly know every part of how the code is working.\n\nIn some ways I oscillate between, shooting for the low end and shooting for the high end as for me, the place in the middle, is sometimes problematic. Like, “I'm kind of showing you the code, but not really” or “I'm just giving some things but not all of them”. This can get confusing. I feel like it's helpful to either go through the process step by step or to just run an example and talk about what it is and why it's meaningful and important. Then student can then look at the code later.\n\nIn some ways a lot of what I do is creating a feeling of ease in the classroom. I often joke that I don't know if I'm teaching anybody or if I'm just giving people the feeling that they're learning. Ultimately students have to learn it on their own when they go and try the stuff and so it's important to have people feel empowered and feel that they can do it.\n\n*Phoenix Perry*\nUsually what I do is I pull the experienced people aside after class and be like “whoa dude, you're awesome, why don't you go and check out this book. You can ignore me when I talk, if you show me what you can do with this.” I give them stuff that's outside their skillset, that's actually really hard, and it's like a puzzle and then they sort of ignore you in class, and at the end they come back with something. The other thing you can do is turn them into TAs, but the danger with those students is that their knowledge is usually patchy in that they think they know more than they actually know. I've seen those students become the worst in the class because they get lapped by the others who are paying attention and are systematic in a pedagogical way.\n\n*John Maeda*\nIf you’re referring to folks who are more adept at coding versus more adept at traditional art, I would say that you deal with it by assuring that the population of your class cohort is distributed 50/50. \n\n*Jer Thorp*\nThe way that I've learned to deal with that is to not be very rigid in the way that I define projects, and to allow people to operate within those projects at a comfort level that works for them. The first time I taught that class I defined the projects so rigidly that that difference between the good coders and the bad coders would really stand out, but by defining the projects less rigidly, it allows people to play to their strengths more and that's something that took me a long time to really embrace. My projects are now about a theme and not about how I insist that you work on that theme.\nLauren McCarthy\nI really try to push that it's not just about wanting to program. A lot of times if you're a very good programmer, that probably means that you haven't spent a lot of time thinking about art or design or user interaction or any of these things. So I just try to emphasize that, but also when we are giving feedback, I try to call on people who have these other skills to make everyone realize, that these are just as important and relevant. \n\nTechnically sometimes it's hard, but setting expectations in the beginning is helpful. Letting the advanced students know that technically it might feel a little bit slow, but that gives them time to explore some of their other ideas and that they should work on that and not sit there being bored by programming but to really engage with what you can do with it. And also vice versa, I try to help the students who are beginners understand that some people have done it before but that doesn't mean that they are bad at it because they haven't done it before. These are different things. I encourage them to not feel intimidated, to survey their skills to see what they are missing and to ask themselves, how they might work on those things. \n\n*Zach Lieberman*\nI deal with this a lot as most the classes I teach tend to be mixed, unless it’s a workshop that’s specifically for advanced students or for beginners which I actually think is a kind of a disservice to everyone. I think having classrooms where there are people with different skillsets is really valuable, specifically in terms of the community. What you want to do is create conversation, create modes where beginners are asking questions of experts and to create a chain of learning. When everyone is in the same place it's much harder to do. What I try to do for the experts is give them prompts where they feel like their input and time in the classroom is both useful and valuable. I often ask them “can you take the things that we’re talking about and create teaching tools, and techniques to teach this better?” I try to turn them into teachers in some way and I try to give them prompts that push them to have that sort of mindset. \n\nThere are also ways of making everybody a beginner because everybody is a beginner in something. So coming to classroom where there are both beginners and experts, can you figure out ways to push the people who think they know the material and flip what they are doing so that they realise that there is a lot that they don’t know. I like to show them the problem set in a different way, like in a different language or with different constraints.\n\nAt some point in a bimodal classroom, I also think there is value in pulling out the beginners or the people who feel like they are lost, and creating a safe place where this small subgroup can meet. So in a classroom of 15 you might have 4-5 students who meet privately and you try to raise their comfort level and confidence. They often need a safer space to ask questions they might not ask in class because they are shy about asking. Creating smaller groups can be helpful."
    },
    {
        "question": "What happens on your worst day in the classroom?",
        "titles": "Interviews VIII",
        "answer": "*Taeyoon Choi*\nOne time I brought resistors for a class to make a flip-flop memory unit. And it's made from just two transistors, two resistors, and then one LED; it's a really simple component. Some of the resistors are colored brown, but it can look like red when it’s dark. So I brought the brown one, which had a different value than the red resistor, and none of the examples worked in the classroom. I was going nuts because I tested it so many times, and I think I might be a little bit colorblind or maybe I was in a hurry, but nothing worked for everyone. It was so frustrating and I was just sweating like crazy and I was so embarrassed. And oh my god it was terrible, not only because it makes me look bad but it discourages students from exploring electronics and technology.\n\nAt the start, students should have immediate feedback: like, the thing should work. Luckily I figured it out at the end of the class and some students had resistors of the right value and we switched them and everything worked. But I was definitely underprepared and got totally lost, and was hating myself for not being prepared.\n\n*Daniel Shiffman*\nI have these moments where nothing is working, and I can't figure out something and these are good things. People tell me this about the videos all the time. Like, “Oh yeah, my favorite part was when you couldn't figure it out and you got stuck for like 10 minutes, because I like to see how that happens to everybody, or I like to see the way you thought about it and tried to fix it.”\n\nIn once sense, I've had really bad, stressful moments that way. There's been moments when I get completely tripped up in my own head. Trying to explain something like a Markov chain and just feeling like, “That was the worst explanation ever, it made no sense! I should have practiced that.” \n\nIt's interesting how you practice your explanations. It's very obvious in your case, because you live this out more publicly than the rest of us. It’s quite clear that all of your explanations are very patiently refined and revised through practice.\n\nI've been doing the videos for a while, but this semester they clicked for me as I was just more mentally focused on them and I used the class to practice for the videos. It used to be the opposite, I used to do the videos to get ready for class but now I’m like those comedians who go to a comedy club to like try material out before their TV special.\n\nAlso if I have the same class that meets two days in a row, I can never have them both go well. It's either the first day is amazing and then I try to force that to happen again the second day and it fails. Or the first day kind of goes haywire and so it sort of motivates me mentally to fix it all the next day.\n\n*Phoenix Perry*\nIt just happened actually. I got hired at Goldsmith University, and my visa process was delayed so I came in halfway through the term. And instead of start me next term, or have someone teach my class half-term, they started my class mid-term. And what that did is throw the rhythm off for those students so when I went to give my midterm, the students rioted. They refused to take it. And they literally just refused. And the reason was is because my midterm hit when their final assignments in all their other classes were due. It's funny, afterward, a few of them felt really bad. One of them even wrote the administration, and was all “Phoenix really had a bad day today.”\n\nI've never actually had to deal with a riot before, so that was really intense but I managed to talk them into it my explaining what it would take for the department to do anything about it, and what it would mean for me to have to do anything about it. What I did in the end, was I allowed them to take their midterm open-book to belay some of the stress. It was intense. Riot in the disco! \n\n*Jer Thorp*\nI taught a programming class for a few years at Vancouver film school and it was not an elective. It was a required class and that sucked as half the students didn't want to be there.  You're always able to recruit some of them, but some of them don't care. This is a school where most of the parents pay the tuition and throw them in there because the kids didn't know what they wanted to do, and so they don't care. Being in a room of students who don't care is really hard even though I think I'm really good at getting people who might not otherwise care to care.\n\nOne last thing I'll say which I think is good advice is if you are teaching programming to non programmers and specifically designers and artists, I think it’s really important to say in the beginning \"my intent here is not to make you into a programmer.  I think you should continue being a printmaker, or a typographer or whatever you are. My intent is to give you some computational tools that will help you.\"  Especially in design school, students will often come in and say \"I don't want to be a computer designer. I don't want to be a software guy.\"  And so I say, “that’s fine. I don't want you to either. I want you to continue being a watercolor painter or a sculptor but I want to give you some provocations that might help the way you think.”"
    }
]
