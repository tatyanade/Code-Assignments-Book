[
    {
        "heading": "Exercises: Sound",
        "exercisetitle": "Theremin ",
        "descriptions": "A *theremin* is a monophonic instrument whose volume and pitch are controlled by the positions of a player's hands, relative to two antennae. Using the x and y positions of the cursor, create a simple theremin in code. You may not use mouse clicks or the keyboard. ",
        "imagename": "exercises/sound/theremin.png",
        "verticalspace": 1
    },
    {
        "heading": "Exercises: Sound",
        "exercisetitle": "Sequencer I",
        "descriptions": "Create a sequencer which plays a fixed, looping phrase or collection of sounds. You will need to use arrays to store values that are interpreted as musical notes, chords, rhythms, or other musical parameters. Consider how your sequencer's \"score\" is displayed. ",
        "imagename": "exercises/sound/theremin2.png",
        "verticalspace": 1
    },
    {
        "heading": "Exercises: Sound",
        "exercisetitle": "Sequencer II",
        "descriptions": "Create a sequencer that allows a performer to record and play back a looping musical phrase. Devise a visual interface so the performer can introduce variability into the playback. For example, changing its speed, transposing it to a different key, playing it backwards, reordering it or arpeggiating its notes or altering its timbre.",
        "imagename": "exercises/sound/sequencer.png",
        "verticalspace": 1
    },
    {
        "heading": "Exercises: Sound",
        "exercisetitle": "Sampler",
        "descriptions": "A *sampler* is an electronic instrument that triggers sound recordings. Create a sampler that triggers sounds with key presses. Develop a method for altering the nature of the playback in a way which is coupled to the x- and y- position of the cursor. ",
        "imagename": "exercises/sound/samples.png",
        "verticalspace": 1
    },
    {
        "heading": "Exercises: Sound",
        "exercisetitle": "Modulation",
        "descriptions": "Create a project that uses oscillators and envelopes to continuously modify some parameter of a sound. For example, you might implement *tremolo* (periodic amplitude modulation), *vibrato* (periodic frequency modulation), or *wah-wah* (periodic modulation of a resonant filter). ",
        "verticalspace": 1
    },
    {
        "heading": "Exercises: Sound",
        "exercisetitle": "Filter",
        "descriptions": "Create a simple interactive program which permits the user to filter a sound or noise source, using the x- and y-positions of a cursor to control the filter. Experiment with different types of filters and their parameters.",
        "verticalspace": 1
    },
    {
        "heading": "Exercises: Sound",
        "exercisetitle": "Polyphony",
        "descriptions": "Create a sonic experience that explores polyphony. Consider using a visual metaphor such as a particle system, where the sound of each voice responds to the x- and y-position of its corresponding particle. For simplicity, restrict your polyphony to multiple voices of the same instrument or sound. ",
        "imagename": "exercises/sound/particles.png",
        "verticalspace": 1
    },
    {
        "heading": "Exercises: Sound",
        "exercisetitle": "Visualizer",
        "descriptions": "Create a music visualizer for a specific musical recording. Your display should respond to the dynamics (volume changes) and, if possible, the frequency content of your chosen music. For simplicity, Be sure to select a recording without speech or lyrics.   ",
        "imagename": "exercises/sound/visualise.png",
        "verticalspace": 1
    },
    {
        "heading": "Exercises: Sound",
        "exercisetitle": "Data Sonification",
        "descriptions": "Locate a real-time Internet data stream such as that published by a sensor or an API (weather, stock prices, satellite locations, tweets, seismic events). Create a program that sonifies this data. Consider whether the data, but could approach it as a compositional element.",
        "imagename": "exercises/data/sonify.png",
        "verticalspace": 1
    },
    {
        "heading": "Exercises: Sound",
        "exercisetitle": "Delay Line Effect",
        "descriptions": "Using a *delay line* (a collection of time-delayed copies of a sound), create a program which transforms a specific sound in a customized way. Popular delay line effects include echo and reverb, but also, when governed by an oscillator, effects like flangers, chorus, and harmonization.",
        "verticalspace": 1
    },
    {
        "heading": "Exercises: Sound",
        "exercisetitle": "Synthetic Voice",
        "descriptions": "Build a \"DIY speech synthesizer\". You may use any audio materials or algorithms you prefer, *except* for actual speech samples or a preexisting text-to-speech system. For example, you could synthesize different vowels with \"formant synthesis\", and consonants with different types of gated noise. What word does your machine pronounce the best? Can it pronounce your name?",
        "verticalspace": 2
    },
    {
        "heading": "Exercises: Sound",
        "exercisetitle": "Whistle Cursor",
        "descriptions": "Find a tool to estimate the pitch of a real-time monophonic audio signal, such as the *fzero~* object in Max/MSP, *sigmund~* in Pure Data, or the *ofxAubio* addon for openFrameworks. Create an interactive game in which the pitch of the user's whistling is used to steer a spaceship up or down.",
        "imagename": "exercises/sound/whistle_cursor.jpg",
        "verticalspace": 1
    },
    {
        "heading": "Exercises: Sound",
        "exercisetitle": "Physical Model",
        "descriptions": "Create or repurpose some code for a real-time physical simulation, such as a particle system or spring mesh. Use time-varying quantities from the physical simulation to govern continuous parameters of an audio synthesizer. Consider using statistical properties of the simulation, such as the standard deviation. Which mappings produce the most compelling or plausible results?",
        "verticalspace": 2
    },
    {
        "heading": "Exercises: Sound",
        "exercisetitle": "Parametric Control",
        "descriptions": "Use one or more parameters derived from a live sound input (pitch, volume, or something else) to control an actuator (motor, light, etc.) in a physical sculpture, product-design prototype, or architectural installation. Give careful consideration to where you place your microphone, and the assumptions this entails about the sounds you collect. For example, you might collect door-knocking sounds with a contact microphone. (1)",
        "verticalspace": 2
    }
]
