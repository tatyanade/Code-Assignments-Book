[
    {
        "in": 1,
        "titles": "Iterative Pattern (Wallpaper)",
        "section": "Processuality",
        "shortdescription": "Generating a texture or textile design\n",
        "level": "All levels ",
        "tagsstem": "iteration, functional abstraction, coordinates, graphics primitives, graphics transforms, tesselation, symmetries",
        "tagsarts": "pattern, texture, rhythm, shape, curves",
        "learningobjectives": "•  Develop an understanding of drawing functions and the Cartesian coordinate system\n•  Use functional abstraction to encapsulate the code for a modular design element\n•  Gain experience generating high-resolution raster and/or vector designs",
        "brief": "Write code to generate a tiling pattern or textural composition, such as for wallpaper or fabric. Give consideration to aesthetic issues like symmetry, rhythm, color; detail at multiple scales; precise control of shape; and the balance between organic and geometric forms. Your pattern should be designed so that it could be infinitely tiled or extended. Design something you would actually like to put on the walls of your home, or which you could imagine yourself actually wearing. Export your pattern in a high-resolution format, and print it as large as possible. Projects will be critiqued at the pin-board. Remember to sketch first.",
        "variations": "•  Experiment with 2D graphics transformations, such as rotate(), scale(), and mirror reflections.\n•  Use *nested iteration* to develop 2D rhythms or other gridlike visual structures.\n•  Create a *helper function* to encapsulate the way in which a complex visual element (such as a flower, animal, fruit, fleur-de-lys, etc.) is rendered throughout your design.\n•  Strictly using code, reproduce a pre-existing textile or wallpaper design.\n•  Make a kaleidoscope, by incorporating a photographic image or video feed into the pattern.\n•  Have your pattern printed on a real textile, wrapping paper, etc. by an online fabrication service such as Spoonflower, Constrvct, or Print All Over Me. Consider other output devices for realizing your pattern, such as computer-controlled laser cutters, knitting machines, and lace-making services.",
        "advancedstudents": "Think beyond the rectangular grid. Investigate \"wallpaper group\" symmetries; convex uniform tilings; aperiodic tiles; texture synthesis and re-synthesis. Experiment with the use of particle systems for placing elements.",
        "hyphenatemim": 0,
        "makingitmeaningful": "Pattern is the starting point from which we perceive and impose order in the world. The art of visual pattern-making is as old as humankind itself, and countless examples abound, whether functional, decorative or expressive, in forms like mosaics, calendars, tapestry, quilting, jewelry, calligraphy, furniture, architecture, and more. There is an intimate connection between pattern design, visual rhythm, geometry, mathematics, and iterative algorithms; this prompt invites students to hone their understanding of these relationships in purely formal terms. Realizing a design *physically*, especially through digital printing or fabrication in an unusual material or size, can be a watershed moment of synthesis for students who crave \"something real\". ",
        "titlegray": 255,
        "fullpageimage": "wallpaper/todo_spamghetto_2_fullpage.jpg",
        "layout": 11,
        "image": "wallpaper/polya_tallhalf.png\nwallpaper/marrakech_tiles_onethird.jpg\nwallpaper/reas_pill_a_day_onethird.jpg\nwallpaper/gondek_gallifreyan_onethird.png",
        "imageborders": "0\n0\n0\n0",
        "aspirationcaptions": "1. In *Spamgetto* (2009), the Italian design agency Todo presents wallpaper whose design is computationally generated from thousands of spam emails. https://www.flickr.com/photos/todotoit/sets/72157616412434905/\n\n2. George Pólya's illustrations (1924) of the seventeen periodic plane symmetry groups had a profound influence on the algorithmic patternmaking of M.C. Escher.\n\n3. Zellige terracotta tiles in Marrakech (17th century) form edge-to-edge, regular and other tessellations. Photo by Ian Alexander, 2000. From Wikipedia. https://en.wikipedia.org/wiki/Tessellation.\n\n4. Casey Reas's *One Non-Narcotic Pill A Day* (2013) presents a dynamic collage pattern generated from a video recording.\n\n5. Alison Gondek, an introductory programming student at CMU, used JavaScript to create this pattern inspired by the “Circular Gallifreyan” language from *Doctor Who*.",
        "additionalreferences": "\"Aperiodic Tiling\". In Wikipedia. https://en.wikipedia.org/wiki/Aperiodic_tiling\nBailey, David. *David Bailey's World of Escher-like Tessellations*. http://www.tess-elation.co.uk/\nGrünbaum, B., & Shephard, G. C. (1987). *Tilings and patterns*. Freeman.\nJones, O. (1868). *The grammar of ornament*. B. Quaritch.\nSchattschneider, D. \"The Mathematical Side of M. C. Escher,\" in *AMS Notices* 57: 706-718, 2010. http://www.ams.org/journals/notices/201006/rtx100600706p.pdf\n\"Texture Synthesis\". In Wikipedia. https://en.wikipedia.org/wiki/Texture_synthesis\n\"Wallpaper Collection\", Historic New England. http://www.historicnewengland.org/collections-archives-exhibitions/collections-access/highlights/wallpaper\n\"Wallpaper Groups\". In Wikipedia. https://en.wikipedia.org/wiki/Wallpaper_group\n\nAlso see works by: Casey Reas, Marius Watz, Lia, Jonathan McCabe, Mitchell Whitelaw, Tina Frank, Joshua Davis, Dave Bollinger, Holger Lippmann."
    },
    {
        "in": 1,
        "titles": "Face Generator",
        "section": "Processuality",
        "shortdescription": "Drawing parametric faces",
        "level": "All levels",
        "tagsstem": "parametric design, constrained randomness, graphics primitives, variables",
        "tagsarts": "portraiture, physiognomy, character design, puppets, avatars",
        "learningobjectives": "•  Develop familiarity with drawing functions and parametric form\n•  Apply generative principles to expressive character design\n•  Develop skills as a meta-designer",
        "brief": "Write code to create a face design which is parameterized by at least three dimensions of variability, but preferably more. For example, you might have variables that specify the size, position, color, or other visual characteristics of the eyes, nose, and mouth. The variations in these features may be used to alter the face’s expression (happy, sad, angry, etc.); the face’s identity (John, Mary, etc.); and/or the face’s species (cat, monkey, zombie, alien, etc.). Give consideration to *continuous* parameters (such as nose size or eyebrow position), versus *discrete* parameters (such as the presence of piercings, or the number of eyeballs). Your system should generate a new face whenever the user clicks the mouse.",
        "variations": "•  Consider whether your faces are 2D or 3D, and whether they are generated in frontal, profile, and/or three-quarters view.\n•  Give special consideration to controlling the precise *shape* of face parts, such as the curves of the nose, chin, ears, and jowls.\n•  Consider characteristics like skin color, stubble, hairstyle, blemishes, interpupillary distance, facial assymmetry, cephalic index, prognathism, etc.\n•  Use your software to generate a deck of collectible trading cards (like Pokémon or baseball cards), featuring a group of imaginary monsters. Print out the cards.\n•  For visualization students, try using actual multivariate data as the basis for generating new faces, rather than randomness.\n•  Add functionality to your face so that it responds to audio or microphone input. \n•  This project can be used as a follow-up to a preliminary exercise: using code to render a static self-portrait.",
        "advancedstudents": "Create a parameterized facial puppet which is controlled by signals from a real-time face tracker (such as *FaceOSC*). Practice a brief monologue and record a screen-captured video performance with your avatar.",
        "hyphenatemim": 0,
        "makingitmeaningful": "Humans are equipped with an exquisite sensitivity to faces. From infancy we easily recognize faces, and can detect very subtle shifts in facial expressions, often being able to discern the slightest change in mood and sincerity in ways that remain impossible for computers. From faces we are also readily able to identify family resemblances, or \"strangers\" in crowds, and we are transfixed by the ways in which the lines on a face can reveal a person's life history. Kyle McDonald writes that \"faces are so important that the impairment of our face-processing ability is seen as a disorder, called *prosopagnosia*, while unconsciously seeing faces where there are none is an almost universal kind of *pareidolia*.\"\n\nThis assignment draws inspiration from the “Chernoff Face\" data visualization technique, which leverages this sensitivity by using facial features to represent multivariate data. In Chernoff Faces, features such as eyes, ears, mouth and nose represent data according to their shape, size, placement and orientation. Whereas Chernoff (1973) used 18 variables to *synthesize* a face, Paul Ekman’s \"Facial Action Coding System\" uses 46 dimensions to *analyze* a facial expression, each corresponding to the action of a different facial muscle.",
        "titlegray": 0,
        "fullpageimage": "generative_face/moka_faces_1_fullpage.jpg",
        "layout": 20,
        "image": "generative_face/hdh_stranger_visions_quarter.jpg\ngenerative_face/chernoff_faces_quarter.png\ngenerative_face/macawnivore_nose_chart_onethird.png\ngenerative_face/mike_pelletier_onethird.jpg\ngenerative_face/sobecka_perfect_creatures_onethird.jpg",
        "imageborders": "0\n0\n0\n0\n0",
        "aspirationcaptions": "1. Although Matthias Dörfelt’s *Weird Faces* (2012) look hand-drawn, they are entirely expressed by algorithmic rules. http://www.mokafolio.de/works/Weird-Faces\n\n2. In Heather Dewey-Hagborg’s astounding *Stranger Visions* (2012), forensic 3D portraits are computed from found DNA fragments. http://deweyhagborg.com/strangervisions/\n\n3. \"Chernoff faces\" are a type of display in which multivariate data are represented by the shape, size, position and orientation of the parts of the face. From Wikipedia. https://en.wikipedia.org/wiki/Chernoff_face\n\n4. *Nose Chart Reference* (2014) by Macawnivore. http://macawnivore.deviantart.com/art/Nose-Chart-Reference-451870046\n\n5. In Mike Pelletier’s *Parametric Expression*, values that govern the articulation of facial models are pushed beyond their normal limits. http://mikepelletier.nl/Parametric-Expression\n\n6. In Karolina Sobecka’s *All the Universe is Full of the Lives of Perfect Creatures* (2012), the visitor puppeteers an avatar through the movements of their own face. http://www.gravitytrap.com/artwork/perfect-creatures",
        "additionalreferences": "Blas, Zach. *Facial Weaponization Suite*.\nhttps://vimeo.com/57882032\nBravi, Lorenzo et al. *Bla Bla Bla*.\nhttp://goo.gl/2w4CfC\nBorenstein, Greg. *Machine Pareidolia*.\nhttp://urbanhonking.com/ideasfordozens/2012/01/14/machine-pareidolia-hello-little-fella-meets-facetracker/\n\"Computer facial animation\". In Wikipedia. https://en.wikipedia.org/wiki/Computer_facial_animation\nDarwin, Charles. *The Expression of Emotions in Man and Animals*. http://darwin-online.org.uk/\n\"Facial Action Coding System\". In Wikipedia. https://en.wikipedia.org/wiki/Facial_Action_Coding_System\nLevin, Golan and Lieberman, Zachary. *Re:Face*. http://www.flong.com/projects/reface/\nLieberman, Zachary. *Masquelacara*. https://www.instagram.com/p/BDxsVZ0JNpm/\nMcDonald, Kyle. *Face as Interface*. https://github.com/kylemcdonald/AppropriatingNewTechnologies/wiki/Week-2\nMcDonald, Kyle. *FaceOSC*. https://github.com/kylemcdonald/ofxFaceTracker\nMcDonald, Kyle and Castro, Arturo. *Face Substitution*. https://vimeo.com/29348533\nMunari, Bruno. *Design as Art*. (1971)\nPerlin, Ken. *FaceDemo* (Java Applet).\nhttp://mrl.nyu.edu/~perlin/facedemo/"
    }
]
